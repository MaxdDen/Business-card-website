#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤ –¥–ª—è CMS
–ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã —Å—Ä–∞–∑—É
"""

import os
import sys
import subprocess
from datetime import datetime

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ç–µ—Å—Ç–∞–º–∏
TESTS_DIR = "tests/auto_tests"

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
AVAILABLE_TESTS = {
    "csrf": {
        "file": "test_csrf_fix.py",
        "description": "–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è CSRF –ø—Ä–æ–±–ª–µ–º—ã"
    },
    "images": {
        "file": "test_images_management.py", 
        "description": "–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"
    },
    "texts": {
        "file": "test_texts_editor_fixed.py",
        "description": "–¢–µ—Å—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Ç–µ–∫—Å—Ç–æ–≤ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"
    },
    "seo": {
        "file": "test_seo_management.py",
        "description": "–¢–µ—Å—Ç SEO —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"
    },
    "users": {
        "file": "test_users_management.py",
        "description": "–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"
    },
    "public": {
        "file": "test_public_site.py",
        "description": "–¢–µ—Å—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ —Å–∞–π—Ç–∞"
    },
    "multilang": {
        "file": "test_multilang.py",
        "description": "–¢–µ—Å—Ç –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç–∏"
    },
    "language_persistence": {
        "file": "test_cms_language_persistence.py",
        "description": "–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –≤ CMS"
    },
    "language_simple": {
        "file": "test_cms_language_simple.py",
        "description": "–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç —è–∑—ã–∫–æ–≤—ã—Ö —Ä–æ—É—Ç–æ–≤ CMS"
    },
    "security": {
        "file": "test_security.py",
        "description": "–¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã (–≠—Ç–∞–ø 12)"
    },
    "build": {
        "file": "test_build_scripts.py",
        "description": "–¢–µ—Å—Ç —Å–∫—Ä–∏–ø—Ç–æ–≤ —Å–±–æ—Ä–∫–∏ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è (–≠—Ç–∞–ø 13)"
    },
    "unit": {
        "file": "test_validation.py",
        "description": "–Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã –¥–ª—è —É—Ç–∏–ª–∏—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏"
    },
    "unit_cache": {
        "file": "test_cache.py", 
        "description": "–Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"
    },
    "unit_database": {
        "file": "test_database.py",
        "description": "–Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã –¥–ª—è SQL-—Å–ª–æ—è"
    },
    "integration_auth": {
        "file": "test_auth.py",
        "description": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
    },
    "integration_crud": {
        "file": "test_crud.py",
        "description": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã CRUD –æ–ø–µ—Ä–∞—Ü–∏–π"
    },
    "lighthouse": {
        "file": "test_lighthouse.py",
        "description": "–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Lighthouse (–≠—Ç–∞–ø 14)"
    }
}

def print_header():
    """–í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    print("=" * 60)
    print("üß™ –ú–ï–ù–ï–î–ñ–ï–† –ê–í–¢–û–¢–ï–°–¢–û–í CMS")
    print("=" * 60)
    print(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()

def print_help():
    """–í—ã–≤–æ–¥ —Å–ø—Ä–∞–≤–∫–∏"""
    print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
    print("  python manage_tests.py [–∫–æ–º–∞–Ω–¥–∞]")
    print()
    print("–ö–æ–º–∞–Ω–¥—ã:")
    print("  all                    - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã")
    print("  list                   - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
    print("  <–∏–º—è_—Ç–µ—Å—Ç–∞>           - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç")
    print("  help                   - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
    print()
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
    for test_id, test_info in AVAILABLE_TESTS.items():
        print(f"  {test_id:<12} - {test_info['description']}")
    print()

def list_tests():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üìã –î–û–°–¢–£–ü–ù–´–ï –¢–ï–°–¢–´:")
    print("-" * 40)
    for test_id, test_info in AVAILABLE_TESTS.items():
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ç–µ—Å—Ç—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if test_id.startswith("unit"):
            file_path = os.path.join(TESTS_DIR, "unit_tests", test_info["file"])
        elif test_id.startswith("integration"):
            file_path = os.path.join(TESTS_DIR, "integration_tests", test_info["file"])
        elif test_id == "lighthouse":
            file_path = os.path.join(TESTS_DIR, "performance_tests", test_info["file"])
        else:
            file_path = os.path.join(TESTS_DIR, "auto_tests", test_info["file"])
        
        exists = "‚úÖ" if os.path.exists(file_path) else "‚ùå"
        print(f"{exists} {test_id:<20} - {test_info['description']}")
        print(f"    –§–∞–π–ª: {test_info['file']}")
    print()

def run_test(test_id):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç"""
    if test_id not in AVAILABLE_TESTS:
        print(f"‚ùå –û—à–∏–±–∫–∞: –¢–µ—Å—Ç '{test_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'python manage_tests.py list' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
        return False
    
    test_info = AVAILABLE_TESTS[test_id]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ç–µ—Å—Ç—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if test_id.startswith("unit"):
        test_file = os.path.join(TESTS_DIR, "unit_tests", test_info["file"])
    elif test_id.startswith("integration"):
        test_file = os.path.join(TESTS_DIR, "integration_tests", test_info["file"])
    elif test_id == "lighthouse":
        test_file = os.path.join(TESTS_DIR, "performance_tests", test_info["file"])
    else:
        test_file = os.path.join(TESTS_DIR, "auto_tests", test_info["file"])
    
    if not os.path.exists(test_file):
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}")
        return False
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_info['description']}")
    print(f"üìÅ –§–∞–π–ª: {test_info['file']}")
    print("-" * 40)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
        result = subprocess.run([sys.executable, test_file], 
                               capture_output=False, 
                               text=True)
        
        if result.returncode == 0:
            print(f"\n‚úÖ –¢–µ—Å—Ç '{test_id}' –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"\n‚ùå –¢–µ—Å—Ç '{test_id}' –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: {result.returncode})")
            return False
            
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞: {str(e)}")
        return False

def run_all_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("üöÄ –ó–ê–ü–£–°–ö –í–°–ï–• –¢–ï–°–¢–û–í")
    print("=" * 40)
    
    results = {}
    total_tests = len(AVAILABLE_TESTS)
    passed_tests = 0
    
    for test_id, test_info in AVAILABLE_TESTS.items():
        print(f"\nüìã –¢–µ—Å—Ç {passed_tests + 1}/{total_tests}: {test_info['description']}")
        print("-" * 50)
        
        success = run_test(test_id)
        results[test_id] = success
        
        if success:
            passed_tests += 1
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    
    for test_id, success in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status:<12} - {test_id}")
    
    print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed_tests == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return True
    else:
        print("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print_header()
    
    if len(sys.argv) < 2:
        print_help()
        return True
    
    command = sys.argv[1].lower()
    
    if command == "help":
        print_help()
        return True
    elif command == "list":
        list_tests()
        return True
    elif command == "all":
        return run_all_tests()
    elif command in AVAILABLE_TESTS:
        return run_test(command)
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        print_help()
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
