#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, project_root)

from app.site.middleware import LanguageMiddleware

def test_language_extraction():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —è–∑—ã–∫–∞"""
    middleware = LanguageMiddleware(None)
    
    print("üß™ –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –∏–∑ URL:")
    
    test_cases = [
        ("/cms/ru/texts", "ru"),
        ("/cms/en/images", "en"),
        ("/cms/ua/seo", "ua"),
        ("/cms/texts", "en"),  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        ("/cms/", "en"),        # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    ]
    
    for url, expected in test_cases:
        result = middleware.extract_language_from_url(url)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"{status} {url} -> {result} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected})")
        assert result == expected

def test_url_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL"""
    middleware = LanguageMiddleware(None)
    
    print("\nüß™ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —è–∑—ã–∫–æ–≤:")
    
    test_cases = [
        ("/cms/ru/texts", "ru"),
        ("/cms/en/images", "en"),
        ("/cms/ua/seo", "ua"),
    ]
    
    for current_path, current_lang in test_cases:
        urls = middleware.get_language_urls(current_path, current_lang)
        print(f"\n–¢–µ–∫—É—â–∏–π –ø—É—Ç—å: {current_path} (—è–∑—ã–∫: {current_lang})")
        print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ URL: {urls}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É –ø—É—Ç–∏
        assert urls[current_lang] == current_path, f"URL –¥–ª—è {current_lang} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å {current_path}, –ø–æ–ª—É—á–µ–Ω {urls[current_lang]}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —è–∑—ã–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        assert "en" in urls, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç URL –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ"
        assert "ru" in urls, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç URL –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ"
        assert "ua" in urls, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç URL –¥–ª—è —É–∫—Ä–∞–∏–Ω—Å–∫–æ–≥–æ"

if __name__ == "__main__":
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞")
    print("=" * 50)
    
    try:
        test_language_extraction()
        print("\n‚úÖ –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
        
        test_url_generation()
        print("\n‚úÖ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏! –Ø–∑—ã–∫ –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö.")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)
