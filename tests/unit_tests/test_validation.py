#!/usr/bin/env python3
"""
–Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import sys
import os
import unittest
from unittest.mock import patch

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..'))

from app.utils.validation import (
    sanitize_string, sanitize_html, validate_email, validate_password,
    validate_text_content, sanitize_filename, detect_sql_injection, detect_xss
)

class TestValidationUtils(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è —É—Ç–∏–ª–∏—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    
    def test_sanitize_string_basic(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏"""
        # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        result = sanitize_string("Hello World")
        self.assertEqual(result, "Hello World")
        
        # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        result = sanitize_string("")
        self.assertEqual(result, "")
        
        # None
        result = sanitize_string(None)
        self.assertEqual(result, "")
    
    def test_sanitize_string_control_chars(self):
        """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        # –°—Ç—Ä–æ–∫–∞ —Å —É–ø—Ä–∞–≤–ª—è—é—â–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
        test_string = "Hello\x00\x01\x02World\x1f\x7f"
        result = sanitize_string(test_string)
        self.assertEqual(result, "HelloWorld")
        
        # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è
        test_string = "Hello\n\r\tWorld"
        result = sanitize_string(test_string)
        self.assertEqual(result, "Hello\n\r\tWorld")
    
    def test_sanitize_string_max_length(self):
        """–¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã"""
        long_string = "A" * 1000
        result = sanitize_string(long_string, max_length=100)
        self.assertEqual(len(result), 100)
        self.assertEqual(result, "A" * 100)
    
    def test_sanitize_string_trim(self):
        """–¢–µ—Å—Ç –æ–±—Ä–µ–∑–∫–∏ –ø—Ä–æ–±–µ–ª–æ–≤"""
        result = sanitize_string("  Hello World  ")
        self.assertEqual(result, "Hello World")
    
    def test_sanitize_html_basic(self):
        """–¢–µ—Å—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML"""
        # –û–±—ã—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        result = sanitize_html("Hello World")
        self.assertEqual(result, "Hello World")
        
        # HTML —Ç–µ–≥–∏
        result = sanitize_html("<script>alert('xss')</script>")
        self.assertEqual(result, "&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;")
        
        # –ö–∞–≤—ã—á–∫–∏
        result = sanitize_html('He said "Hello"')
        self.assertEqual(result, 'He said &quot;Hello&quot;')
    
    def test_validate_email_valid(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö email"""
        valid_emails = [
            "test@example.com",
            "user.name@domain.co.uk",
            "user+tag@example.org",
            "123@test.com"
        ]
        
        for email in valid_emails:
            is_valid, message = validate_email(email)
            self.assertTrue(is_valid, f"Email {email} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º: {message}")
    
    def test_validate_email_invalid(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö email"""
        invalid_emails = [
            "",
            "invalid",
            "@example.com",
            "test@",
            "test@.com",
            "test..test@example.com",
            "test@example..com",
            "a" * 300 + "@example.com"  # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        ]
        
        for email in invalid_emails:
            is_valid, message = validate_email(email)
            self.assertFalse(is_valid, f"Email {email} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º")
    
    def test_validate_password_valid(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π"""
        valid_passwords = [
            "password123",
            "MySecure123",
            "12345678",
            "abcdefgh",
            "P@ssw0rd!"
        ]
        
        for password in valid_passwords:
            is_valid, message = validate_password(password)
            self.assertTrue(is_valid, f"–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º: {message}")
    
    def test_validate_password_invalid(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π"""
        invalid_passwords = [
            "",
            "1234567",  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
            "a" * 100,  # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            "12345678",  # –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
            "abcdefgh",  # –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã
            "!@#$%^&*"   # –¢–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª—ã
        ]
        
        for password in invalid_passwords:
            is_valid, message = validate_password(password)
            self.assertFalse(is_valid, f"–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º: {message}")
    
    def test_validate_text_content_valid(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        valid_texts = [
            "Hello World",
            "A" * 1000,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
            "–¢–µ–∫—Å—Ç —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π",
            "Text with\nnewlines"
        ]
        
        for text in valid_texts:
            is_valid, message = validate_text_content(text)
            self.assertTrue(is_valid, f"–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º: {message}")
    
    def test_validate_text_content_invalid(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        invalid_texts = [
            "A" * 10001,  # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            None,
            ""  # –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
        ]
        
        for text in invalid_texts:
            is_valid, message = validate_text_content(text)
            self.assertFalse(is_valid, f"–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º: {message}")
    
    def test_sanitize_filename_basic(self):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        # –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –∏–º—è
        result = sanitize_filename("image.jpg")
        self.assertEqual(result, "image.jpg")
        
        # –û–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        result = sanitize_filename("../../../etc/passwd")
        self.assertEqual(result, "etcpasswd")
        
        # –ü—É—Ç—å traversal
        result = sanitize_filename("..\\..\\windows\\system32")
        self.assertEqual(result, "windowssystem32")
    
    def test_sanitize_filename_length(self):
        """–¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        long_name = "A" * 300 + ".jpg"
        result = sanitize_filename(long_name)
        self.assertLessEqual(len(result), 255)
    
    def test_detect_sql_injection_clean(self):
        """–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è SQL –∏–Ω—ä–µ–∫—Ü–∏–π –≤ —á–∏—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö"""
        clean_inputs = [
            "Hello World",
            "user@example.com",
            "normal text",
            "SELECT * FROM users"  # –ù–µ –∏–Ω—ä–µ–∫—Ü–∏—è, –µ—Å–ª–∏ –≤ –∫–∞–≤—ã—á–∫–∞—Ö
        ]
        
        for text in clean_inputs:
            is_injection, message = detect_sql_injection(text)
            self.assertFalse(is_injection, f"–¢–µ–∫—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –∫–∞–∫ SQL –∏–Ω—ä–µ–∫—Ü–∏—è: {message}")
    
    def test_detect_sql_injection_malicious(self):
        """–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è SQL –∏–Ω—ä–µ–∫—Ü–∏–π"""
        malicious_inputs = [
            "'; DROP TABLE users; --",
            "' OR '1'='1",
            "admin'--",
            "1' UNION SELECT * FROM users--",
            "'; INSERT INTO users VALUES ('hacker', 'password'); --"
        ]
        
        for text in malicious_inputs:
            is_injection, message = detect_sql_injection(text)
            self.assertTrue(is_injection, f"–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –∫–∞–∫ SQL –∏–Ω—ä–µ–∫—Ü–∏—è: {message}")
    
    def test_detect_xss_clean(self):
        """–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è XSS –≤ —á–∏—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö"""
        clean_inputs = [
            "Hello World",
            "normal text",
            "user@example.com",
            "Simple HTML: <b>bold</b>"
        ]
        
        for text in clean_inputs:
            is_xss, message = detect_xss(text)
            self.assertFalse(is_xss, f"–¢–µ–∫—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –∫–∞–∫ XSS: {message}")
    
    def test_detect_xss_malicious(self):
        """–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è XSS –∞—Ç–∞–∫"""
        malicious_inputs = [
            "<script>alert('xss')</script>",
            "javascript:alert('xss')",
            "<img src=x onerror=alert('xss')>",
            "<iframe src=javascript:alert('xss')></iframe>",
            "onload=alert('xss')",
            "<svg onload=alert('xss')>"
        ]
        
        for text in malicious_inputs:
            is_xss, message = detect_xss(text)
            self.assertTrue(is_xss, f"–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –∫–∞–∫ XSS: {message}")
    
    def test_edge_cases(self):
        """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
        # –ü—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        self.assertEqual(sanitize_string(""), "")
        self.assertEqual(sanitize_string(None), "")
        
        # Unicode —Å–∏–º–≤–æ–ª—ã
        unicode_text = "–ü—Ä–∏–≤–µ—Ç ‰∏ñÁïå üåç"
        result = sanitize_string(unicode_text)
        self.assertEqual(result, unicode_text)
        
        # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        long_text = "A" * 10000
        result = sanitize_string(long_text, max_length=100)
        self.assertEqual(len(result), 100)
    
    def test_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        import time
        
        # –ë–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç
        large_text = "A" * 10000
        
        start_time = time.time()
        result = sanitize_string(large_text)
        end_time = time.time()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±—ã—Å—Ç—Ä–æ–π (< 0.1 —Å–µ–∫)
        self.assertLess(end_time - start_time, 0.1)
        self.assertEqual(len(result), 10000)


class TestValidationIntegration(unittest.TestCase):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    
    def test_validation_pipeline(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        # –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        user_input = "  <script>alert('xss')</script>  "
        email = "test@example.com"
        password = "password123"
        
        # –û—á–∏—Å—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
        cleaned_input = sanitize_string(user_input)
        html_safe = sanitize_html(cleaned_input)
        
        email_valid, _ = validate_email(email)
        password_valid, _ = validate_password(password)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        self.assertTrue(email_valid)
        self.assertTrue(password_valid)
        self.assertNotIn("<script>", html_safe)
        self.assertIn("&lt;script&gt;", html_safe)
    
    def test_security_validation_combined(self):
        """–¢–µ—Å—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        dangerous_inputs = [
            "'; DROP TABLE users; --",
            "<script>alert('xss')</script>",
            "../../../etc/passwd",
            "admin' OR '1'='1"
        ]
        
        for dangerous_input in dangerous_inputs:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º SQL –∏–Ω—ä–µ–∫—Ü–∏–∏
            is_sql_injection, _ = detect_sql_injection(dangerous_input)
            self.assertTrue(is_sql_injection, f"–î–æ–ª–∂–Ω–∞ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å—Å—è SQL –∏–Ω—ä–µ–∫—Ü–∏—è: {dangerous_input}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º XSS
            is_xss, _ = detect_xss(dangerous_input)
            if "<script>" in dangerous_input:
                self.assertTrue(is_xss, f"–î–æ–ª–∂–Ω–∞ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å—Å—è XSS: {dangerous_input}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–∏—Å—Ç–∫—É
            cleaned = sanitize_string(dangerous_input)
            self.assertNotEqual(cleaned, dangerous_input)


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    unittest.main(verbosity=2)
