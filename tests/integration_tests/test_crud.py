#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–∞–º–∏, SEO –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —á–µ—Ä–µ–∑ API
"""

import sys
import os
import json
import time
import base64
import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
import unittest

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..'))

class TestCRUDIntegration(unittest.TestCase):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã CRUD –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    @classmethod
    def setUpClass(cls):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ —Ç–µ—Å—Ç–∞–º–∏"""
        cls.base_url = "http://localhost:8000"
        cls.session = requests.Session()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ retry —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        retry_strategy = Retry(
            total=3,
            backoff_factor=1,
            status_forcelist=[429, 500, 502, 503, 504],
        )
        adapter = HTTPAdapter(max_retries=retry_strategy)
        cls.session.mount("http://", adapter)
        cls.session.mount("https://", adapter)
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        self.session.cookies.clear()
        self.test_data = {
            "texts": {
                "home": {
                    "ru": {"title": "–ì–ª–∞–≤–Ω–∞—è", "subtitle": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", "description": "–û–ø–∏—Å–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"},
                    "en": {"title": "Home", "subtitle": "Welcome", "description": "Home page description"}
                },
                "about": {
                    "ru": {"title": "–û –Ω–∞—Å", "subtitle": "–ù–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è", "description": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏"},
                    "en": {"title": "About", "subtitle": "Our company", "description": "Company information"}
                }
            },
            "seo": {
                "home": {
                    "ru": {"title": "–ì–ª–∞–≤–Ω–∞—è - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞", "description": "–û–ø–∏—Å–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã", "keywords": "–≥–ª–∞–≤–Ω–∞—è, —Å–∞–π—Ç"},
                    "en": {"title": "Home - Site Name", "description": "Home page description", "keywords": "home, site"}
                }
            }
        }
    
    def authenticate_user(self):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            login_data = {
                "email": "admin@example.com",
                "password": "adminpassword123"
            }
            
            response = self.session.post(
                f"{self.base_url}/login",
                data=login_data,
                timeout=10
            )
            
            if response.status_code == 200 and "cms" in response.url.lower():
                return True
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å
                registration_data = {
                    "email": f"test_{int(time.time())}@example.com",
                    "password": "testpassword123",
                    "confirm_password": "testpassword123"
                }
                
                response = self.session.post(
                    f"{self.base_url}/register",
                    data=registration_data,
                    timeout=10
                )
                
                return response.status_code == 200 and "cms" in response.url.lower()
                
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return False
    
    def test_texts_crud_operations(self):
        """–¢–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤"""
        print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤...")
        
        if not self.authenticate_user():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è")
            return
        
        try:
            # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤
            response = self.session.get(f"{self.base_url}/cms/api/texts", timeout=10)
            if response.status_code == 200:
                print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                texts_data = response.json()
                print(f"   –ü–æ–ª—É—á–µ–Ω–æ {len(texts_data)} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤")
            else:
                print(f"‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤: —Å—Ç–∞—Ç—É—Å {response.status_code}")
            
            # 2. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤
            test_texts = {
                "page": "home",
                "lang": "ru",
                "texts": {
                    "title": f"–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ {int(time.time())}",
                    "subtitle": "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫",
                    "description": "–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
                }
            }
            
            response = self.session.post(
                f"{self.base_url}/cms/api/texts",
                json=test_texts,
                timeout=10
            )
            
            if response.status_code == 200:
                print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
                response = self.session.get(f"{self.base_url}/cms/api/texts", timeout=10)
                if response.status_code == 200:
                    saved_texts = response.json()
                    # –ò—â–µ–º –Ω–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    found = False
                    for text_block in saved_texts:
                        if "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫" in text_block.get("value", ""):
                            found = True
                            break
                    
                    if found:
                        print("‚úÖ –¢–µ–∫—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                    else:
                        print("‚ö†Ô∏è  –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ")
                else:
                    print(f"‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: —Å—Ç–∞—Ç—É—Å {response.status_code}")
            else:
                print(f"‚ö†Ô∏è  –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤: —Å—Ç–∞—Ç—É—Å {response.status_code}")
                
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤: {e}")
    
    def test_seo_crud_operations(self):
        """–¢–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è SEO"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è SEO...")
        
        if not self.authenticate_user():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è")
            return
        
        try:
            # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ SEO –¥–∞–Ω–Ω—ã—Ö
            response = self.session.get(f"{self.base_url}/cms/api/seo", timeout=10)
            if response.status_code == 200:
                print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ SEO –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
                seo_data = response.json()
                print(f"   –ü–æ–ª—É—á–µ–Ω–æ {len(seo_data)} SEO –∑–∞–ø–∏—Å–µ–π")
            else:
                print(f"‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω–∏–µ SEO: —Å—Ç–∞—Ç—É—Å {response.status_code}")
            
            # 2. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ SEO –¥–∞–Ω–Ω—ã—Ö
            test_seo = {
                "page": "home",
                "lang": "ru",
                "seo": {
                    "title": f"SEO –∑–∞–≥–æ–ª–æ–≤–æ–∫ {int(time.time())}",
                    "description": "SEO –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                    "keywords": "—Ç–µ—Å—Ç, seo, –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"
                }
            }
            
            response = self.session.post(
                f"{self.base_url}/cms/api/seo",
                json=test_seo,
                timeout=10
            )
            
            if response.status_code == 200:
                print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ SEO –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                response = self.session.get(f"{self.base_url}/cms/api/seo", timeout=10)
                if response.status_code == 200:
                    saved_seo = response.json()
                    found = False
                    for seo_block in saved_seo:
                        if "SEO –∑–∞–≥–æ–ª–æ–≤–æ–∫" in seo_block.get("title", ""):
                            found = True
                            break
                    
                    if found:
                        print("‚úÖ SEO –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                    else:
                        print("‚ö†Ô∏è  –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ SEO –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ")
                else:
                    print(f"‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è SEO: —Å—Ç–∞—Ç—É—Å {response.status_code}")
            else:
                print(f"‚ö†Ô∏è  –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ SEO: —Å—Ç–∞—Ç—É—Å {response.status_code}")
                
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SEO: {e}")
    
    def test_images_crud_operations(self):
        """–¢–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        print("\nüñºÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
        
        if not self.authenticate_user():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è")
            return
        
        try:
            # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            response = self.session.get(f"{self.base_url}/cms/api/images", timeout=10)
            if response.status_code == 200:
                print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
                images_data = response.json()
                print(f"   –ù–∞–π–¥–µ–Ω–æ {len(images_data)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            else:
                print(f"‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: —Å—Ç–∞—Ç—É—Å {response.status_code}")
            
            # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1x1 –ø–∏–∫—Å–µ–ª—å PNG)
            test_image_data = base64.b64decode(
                "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg=="
            )
            
            files = {
                'file': ('test_image.png', test_image_data, 'image/png')
            }
            data = {
                'type': 'slider',
                'order': '1'
            }
            
            response = self.session.post(
                f"{self.base_url}/cms/api/images/upload",
                files=files,
                data=data,
                timeout=15
            )
            
            if response.status_code == 200:
                print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—è–≤–∏–ª–æ—Å—å –≤ —Å–ø–∏—Å–∫–µ
                response = self.session.get(f"{self.base_url}/cms/api/images", timeout=10)
                if response.status_code == 200:
                    updated_images = response.json()
                    if len(updated_images) > 0:
                        print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –ø–æ—è–≤–∏–ª–æ—Å—å –≤ —Å–ø–∏—Å–∫–µ")
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        if updated_images:
                            test_image = updated_images[0]
                            if 'id' in test_image:
                                delete_response = self.session.delete(
                                    f"{self.base_url}/cms/api/images/{test_image['id']}",
                                    timeout=10
                                )
                                if delete_response.status_code == 200:
                                    print("‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
                                else:
                                    print(f"‚ö†Ô∏è  –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: —Å—Ç–∞—Ç—É—Å {delete_response.status_code}")
                    else:
                        print("‚ö†Ô∏è  –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ")
                else:
                    print(f"‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: —Å—Ç–∞—Ç—É—Å {response.status_code}")
            else:
                print(f"‚ö†Ô∏è  –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: —Å—Ç–∞—Ç—É—Å {response.status_code}")
                
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
    
    def test_validation_errors(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...")
        
        if not self.authenticate_user():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è")
            return
        
        try:
            # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤
            invalid_texts = {
                "page": "invalid_page",  # –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                "lang": "invalid_lang",  # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —è–∑—ã–∫
                "texts": {
                    "title": "A" * 1000  # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
                }
            }
            
            response = self.session.post(
                f"{self.base_url}/cms/api/texts",
                json=invalid_texts,
                timeout=10
            )
            
            if response.status_code == 400:
                print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print(f"‚ö†Ô∏è  –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤: —Å—Ç–∞—Ç—É—Å {response.status_code}")
            
            # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ SEO
            invalid_seo = {
                "page": "home",
                "lang": "ru",
                "seo": {
                    "title": "A" * 100,  # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π title
                    "description": "B" * 200,  # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ description
                    "keywords": "C" * 300  # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ keywords
                }
            }
            
            response = self.session.post(
                f"{self.base_url}/cms/api/seo",
                json=invalid_seo,
                timeout=10
            )
            
            if response.status_code == 400:
                print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è SEO —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print(f"‚ö†Ô∏è  –í–∞–ª–∏–¥–∞—Ü–∏—è SEO: —Å—Ç–∞—Ç—É—Å {response.status_code}")
                
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
    
    def test_performance_metrics(self):
        """–¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        if not self.authenticate_user():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è")
            return
        
        try:
            # –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤
            start_time = time.time()
            response = self.session.get(f"{self.base_url}/cms/api/texts", timeout=10)
            end_time = time.time()
            
            response_time = end_time - start_time
            
            if response.status_code == 200:
                if response_time < 1.0:
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ –±—ã—Å—Ç—Ä–æ: {response_time:.3f}—Å")
                else:
                    print(f"‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ –º–µ–¥–ª–µ–Ω–Ω–æ: {response_time:.3f}—Å")
            else:
                print(f"‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤: —Å—Ç–∞—Ç—É—Å {response.status_code}")
            
            # –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è SEO
            start_time = time.time()
            response = self.session.get(f"{self.base_url}/cms/api/seo", timeout=10)
            end_time = time.time()
            
            response_time = end_time - start_time
            
            if response.status_code == 200:
                if response_time < 1.0:
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ SEO –±—ã—Å—Ç—Ä–æ: {response_time:.3f}—Å")
                else:
                    print(f"‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω–∏–µ SEO –º–µ–¥–ª–µ–Ω–Ω–æ: {response_time:.3f}—Å")
            else:
                print(f"‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω–∏–µ SEO: —Å—Ç–∞—Ç—É—Å {response.status_code}")
            
            # –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            start_time = time.time()
            response = self.session.get(f"{self.base_url}/cms/api/images", timeout=10)
            end_time = time.time()
            
            response_time = end_time - start_time
            
            if response.status_code == 200:
                if response_time < 1.0:
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±—ã—Å—Ç—Ä–æ: {response_time:.3f}—Å")
                else:
                    print(f"‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–µ–¥–ª–µ–Ω–Ω–æ: {response_time:.3f}—Å")
            else:
                print(f"‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: —Å—Ç–∞—Ç—É—Å {response.status_code}")
                
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
    
    def test_concurrent_operations(self):
        """–¢–µ—Å—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...")
        
        if not self.authenticate_user():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è")
            return
        
        try:
            import threading
            import queue
            
            results = queue.Queue()
            
            def worker(worker_id):
                try:
                    # –ö–∞–∂–¥—ã–π worker –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
                    for i in range(5):
                        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤
                        response = self.session.get(f"{self.base_url}/cms/api/texts", timeout=5)
                        if response.status_code == 200:
                            results.put(f"worker_{worker_id}_get_texts_ok")
                        
                        # –ü–æ–ª—É—á–µ–Ω–∏–µ SEO
                        response = self.session.get(f"{self.base_url}/cms/api/seo", timeout=5)
                        if response.status_code == 200:
                            results.put(f"worker_{worker_id}_get_seo_ok")
                        
                        time.sleep(0.1)
                    
                    results.put(f"worker_{worker_id}_completed")
                except Exception as e:
                    results.put(f"worker_{worker_id}_error: {e}")
            
            # –ó–∞–ø—É—Å–∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö worker'–æ–≤
            threads = []
            for i in range(3):
                thread = threading.Thread(target=worker, args=(i,))
                threads.append(thread)
                thread.start()
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            for thread in threads:
                thread.join()
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            success_count = 0
            error_count = 0
            
            while not results.empty():
                result = results.get()
                if "ok" in result:
                    success_count += 1
                elif "error" in result:
                    error_count += 1
            
            print(f"‚úÖ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {success_count} —É—Å–ø–µ—à–Ω—ã—Ö, {error_count} –æ—à–∏–±–æ–∫")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("üß™ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π...")
    print("=" * 60)
    print("‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: uvicorn app.main:app --reload")
    print("=" * 60)
    
    unittest.main(verbosity=2)
