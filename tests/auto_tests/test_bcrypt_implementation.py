#!/usr/bin/env python3
"""
–ê–≤—Ç–æ—Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è bcrypt –≤ –ø—Ä–æ–µ–∫—Ç–µ
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ bcrypt –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π –ø–æ best practices
"""

import sys
import os
import warnings
import traceback

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))

def test_bcrypt_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ bcrypt"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ bcrypt...")
    try:
        import bcrypt
        print(f"   ‚úÖ bcrypt –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ, –≤–µ—Ä—Å–∏—è: {bcrypt.__version__}")
        return True
    except ImportError as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ bcrypt: {e}")
        return False
    except Exception as e:
        print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ bcrypt: {e}")
        return False

def test_no_passlib_usage():
    """–¢–µ—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è passlib"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è passlib...")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ passlib –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª—è—Ö
        from app.auth.security import hash_password, verify_password
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –∫–æ–¥–µ –Ω–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–π passlib
        import inspect
        source = inspect.getsource(hash_password)
        if 'passlib' in source.lower():
            print("   ‚ùå –ù–∞–π–¥–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ passlib –≤ hash_password")
            return False
            
        source = inspect.getsource(verify_password)
        if 'passlib' in source.lower():
            print("   ‚ùå –ù–∞–π–¥–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ passlib –≤ verify_password")
            return False
            
        print("   ‚úÖ passlib –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ passlib: {e}")
        return False

def test_bcrypt_functionality():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ bcrypt"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ bcrypt...")
    try:
        from app.auth.security import hash_password, verify_password
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ä–æ–ª–∏
        test_passwords = [
            "simple_password",
            "complex_P@ssw0rd!",
            "–ø–∞—Ä–æ–ª—å_—Å_–∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π",
            "password_with_72_chars_" + "x" * 40,  # 72 —Å–∏–º–≤–æ–ª–∞
            "very_long_password_" + "x" * 100,  # > 72 —Å–∏–º–≤–æ–ª–æ–≤
        ]
        
        for password in test_passwords:
            print(f"   –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å: {password[:20]}...")
            
            # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
            password_hash = hash_password(password)
            print(f"   ‚úÖ –•—ç—à —Å–æ–∑–¥–∞–Ω: {password_hash[:30]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö—ç—à –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å $2b$ (bcrypt)
            if not password_hash.startswith('$2b$'):
                print(f"   ‚ùå –•—ç—à –Ω–µ —è–≤–ª—è–µ—Ç—Å—è bcrypt: {password_hash[:20]}...")
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
            is_valid = verify_password(password, password_hash)
            if not is_valid:
                print(f"   ‚ùå –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ –¥–ª—è –ø–∞—Ä–æ–ª—è: {password[:20]}...")
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç
            wrong_password = password + "_wrong"
            is_invalid = verify_password(wrong_password, password_hash)
            if is_invalid:
                print(f"   ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –ø—Ä–æ—à–µ–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é: {wrong_password[:20]}...")
                return False
                
            print(f"   ‚úÖ –ü–∞—Ä–æ–ª—å {password[:20]}... –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        print("   ‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ bcrypt –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ bcrypt: {e}")
        traceback.print_exc()
        return False

def test_bcrypt_security():
    """–¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ bcrypt"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ bcrypt...")
    try:
        from app.auth.security import hash_password, verify_password
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º, —á—Ç–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏ –¥–∞—é—Ç —Ä–∞–∑–Ω—ã–µ —Ö—ç—à–∏ (—Å–æ–ª—å)
        password = "test_password"
        hash1 = hash_password(password)
        hash2 = hash_password(password)
        
        if hash1 == hash2:
            print("   ‚ùå –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ö—ç—à–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–ª—å)")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ —Ö—ç—à–∞ –≤–∞–ª–∏–¥–Ω—ã
        if not verify_password(password, hash1) or not verify_password(password, hash2):
            print("   ‚ùå –û–¥–∏–Ω –∏–∑ —Ö—ç—à–µ–π –Ω–µ –ø—Ä–æ—à–µ–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é")
            return False
            
        print("   ‚úÖ –°–æ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - —Ä–∞–∑–Ω—ã–µ —Ö—ç—à–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –ø–∞—Ä–æ–ª—è (72 –±–∞–π—Ç–∞)
        long_password = "x" * 100  # 100 —Å–∏–º–≤–æ–ª–æ–≤
        hash_long = hash_password(long_password)
        is_valid_long = verify_password(long_password, hash_long)
        
        if not is_valid_long:
            print("   ‚ùå –î–ª–∏–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ –ø—Ä–æ—à–µ–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é")
            return False
            
        print("   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Unicode –ø–∞—Ä–æ–ª–∏
        unicode_password = "–ø–∞—Ä–æ–ª—å_—Å_—ç–º–æ–¥–∑–∏_üöÄ_–∏_–∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π"
        hash_unicode = hash_password(unicode_password)
        is_valid_unicode = verify_password(unicode_password, hash_unicode)
        
        if not is_valid_unicode:
            print("   ‚ùå Unicode –ø–∞—Ä–æ–ª—å –Ω–µ –ø—Ä–æ—à–µ–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é")
            return False
            
        print("   ‚úÖ Unicode –ø–∞—Ä–æ–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        print("   ‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ bcrypt –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ bcrypt: {e}")
        traceback.print_exc()
        return False

def test_bcrypt_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ bcrypt"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ bcrypt...")
    try:
        from app.auth.security import hash_password, verify_password
        import time
        
        password = "performance_test_password"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        start_time = time.time()
        password_hash = hash_password(password)
        hash_time = time.time() - start_time
        
        print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è: {hash_time:.3f} —Å–µ–∫—É–Ω–¥")
        
        # bcrypt –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–æ–±—ã—á–Ω–æ 0.1-0.5 —Å–µ–∫)
        if hash_time < 0.05:
            print("   ‚ö†Ô∏è  –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ–µ, –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ")
        elif hash_time > 2.0:
            print("   ‚ö†Ô∏è  –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ–µ")
        else:
            print("   ‚úÖ –í—Ä–µ–º—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        start_time = time.time()
        is_valid = verify_password(password, password_hash)
        verify_time = time.time() - start_time
        
        print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {verify_time:.3f} —Å–µ–∫—É–Ω–¥")
        
        if not is_valid:
            print("   ‚ùå –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞")
            return False
            
        print("   ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å bcrypt –≤ –Ω–æ—Ä–º–µ")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ bcrypt: {e}")
        return False

def test_no_bcrypt_warnings():
    """–¢–µ—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π bcrypt"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π bcrypt...")
    try:
        with warnings.catch_warnings(record=True) as w:
            warnings.simplefilter("always")
            
            from app.auth.security import hash_password, verify_password
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–∞—Ä–æ–ª—è–º–∏
            password = "test_warning_password"
            password_hash = hash_password(password)
            verify_password(password, password_hash)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ bcrypt
            bcrypt_warnings = [warning for warning in w if 'bcrypt' in str(warning.message).lower()]
            
            if bcrypt_warnings:
                print(f"   ‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è bcrypt: {len(bcrypt_warnings)}")
                for warning in bcrypt_warnings:
                    print(f"      - {warning.message}")
                return False
            else:
                print("   ‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è bcrypt –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                return True
                
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π bcrypt: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Ç–µ—Å—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è bcrypt")
    print("=" * 60)
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç bcrypt", test_bcrypt_import),
        ("–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ passlib", test_no_passlib_usage),
        ("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å bcrypt", test_bcrypt_functionality),
        ("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å bcrypt", test_bcrypt_security),
        ("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å bcrypt", test_bcrypt_performance),
        ("–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π", test_no_bcrypt_warnings),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}")
        print("-" * 40)
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå {test_name} - –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name} - –û–®–ò–ë–ö–ê: {e}")
            traceback.print_exc()
    
    print("\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! bcrypt —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return True
    else:
        print(f"‚ö†Ô∏è  {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
