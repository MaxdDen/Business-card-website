#!/usr/bin/env python3
"""
–ê–≤—Ç–æ—Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import sys
import os
import logging
import subprocess
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..'))

def test_startup_without_errors():
    """–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ –æ—à–∏–±–æ–∫ —Å –¥–ª–∏–Ω–Ω—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        from app.auth.security import hash_password, verify_password
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –¥–ª–∏–Ω–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
        long_password = "a" * 100
        print(f"   –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –¥–ª–∏–Ω–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º: {len(long_password)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –•—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        password_hash = hash_password(long_password)
        print(f"   ‚úÖ –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: {password_hash[:30]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
        is_valid = verify_password(long_password, password_hash)
        print(f"   ‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {is_valid}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å Unicode –ø–∞—Ä–æ–ª–µ–º
        unicode_password = "–ø–∞—Ä–æ–ª—å" + "üîê" * 20
        print(f"   –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å Unicode –ø–∞—Ä–æ–ª–µ–º: {len(unicode_password)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        unicode_hash = hash_password(unicode_password)
        print(f"   ‚úÖ Unicode —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: {unicode_hash[:30]}...")
        
        unicode_valid = verify_password(unicode_password, unicode_hash)
        print(f"   ‚úÖ Unicode –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {unicode_valid}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

def test_import_modules():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –±–µ–∑ –æ—à–∏–±–æ–∫"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π...")
    
    modules_to_test = [
        "app.main",
        "app.auth.security", 
        "app.auth.routes",
        "app.database.db",
        "app.cms.routes",
        "app.site.routes"
    ]
    
    success_count = 0
    
    for module_name in modules_to_test:
        try:
            __import__(module_name)
            print(f"   ‚úÖ {module_name}: –∏–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
            success_count += 1
        except Exception as e:
            print(f"   ‚ùå {module_name}: –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ - {e}")
    
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(modules_to_test)} –º–æ–¥—É–ª–µ–π –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    return success_count == len(modules_to_test)

def test_security_functions():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
    
    try:
        from app.auth.security import hash_password, verify_password, create_access_token, decode_token
        
        # –¢–µ—Å—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –ø–∞—Ä–æ–ª–µ–π
        test_passwords = [
            "short",
            "a" * 72,  # —Ä–æ–≤–Ω–æ 72 –±–∞–π—Ç–∞
            "a" * 100,  # –±–æ–ª—å—à–µ 72 –±–∞–π—Ç
            "–ø–∞—Ä–æ–ª—å123",
            "üîê" * 30,
            "",  # –ø—É—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å
        ]
        
        success_count = 0
        
        for password in test_passwords:
            try:
                # –•—ç—à–∏—Ä—É–µ–º
                password_hash = hash_password(password)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
                is_valid = verify_password(password, password_hash)
                
                if is_valid:
                    print(f"   ‚úÖ –ü–∞—Ä–æ–ª—å '{password[:20]}...': OK")
                    success_count += 1
                else:
                    print(f"   ‚ùå –ü–∞—Ä–æ–ª—å '{password[:20]}...': –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞")
                    
            except Exception as e:
                print(f"   ‚ùå –ü–∞—Ä–æ–ª—å '{password[:20]}...': –æ—à–∏–±–∫–∞ - {e}")
        
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(test_passwords)} –ø–∞—Ä–æ–ª–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return success_count == len(test_passwords)
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
    print("=" * 60)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(level=logging.WARNING)  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π", test_import_modules),
        ("–§—É–Ω–∫—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", test_security_functions),
        ("–ó–∞–ø—É—Å–∫ –±–µ–∑ –æ—à–∏–±–æ–∫", test_startup_without_errors),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}")
        print("-" * 40)
        
        try:
            if test_func():
                print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                passed += 1
            else:
                print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
