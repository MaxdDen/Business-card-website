"""
–ê–≤—Ç–æ—Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤
"""
import os
import sys
import tempfile
import shutil
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from app.utils.template_parser import TemplateParser
from app.database.db import execute, query_one, query_all


def test_template_parser_basic_functionality():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Å–µ—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Å–µ—Ä–∞...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        with tempfile.TemporaryDirectory() as temp_dir:
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            templates_dir = Path(temp_dir) / "templates"
            public_dir = templates_dir / "public"
            public_dir.mkdir(parents=True)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã
            test_templates = {
                "home.html": """
<!DOCTYPE html>
<html>
<head>
    <title>{{ seo.title }}</title>
    <meta name="description" content="{{ seo.description }}">
</head>
<body>
    <h1>{{ texts.title }}</h1>
    <p>{{ texts.description }}</p>
    {% if texts.subtitle %}
    <h2>{{ texts.subtitle }}</h2>
    {% endif %}
    <p>Language: {{ lang }}</p>
</body>
</html>
                """,
                "about.html": """
<!DOCTYPE html>
<html>
<head>
    <title>{{ seo.title }}</title>
</head>
<body>
    <h1>{{ texts.title }}</h1>
    <p>{{ texts.content }}</p>
    <p>Phone: {{ texts.phone }}</p>
    <p>Address: {{ texts.address }}</p>
</body>
</html>
                """
            }
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
            for filename, content in test_templates.items():
                with open(public_dir / filename, 'w', encoding='utf-8') as f:
                    f.write(content)
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä —Å —Ç–µ—Å—Ç–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π
            parser = TemplateParser(str(templates_dir))
            
            # –¢–µ—Å—Ç 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
            print("  ‚úì –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞...")
            home_variables = parser.extract_variables_from_file(str(public_dir / "home.html"))
            expected_home = {"seo.title", "seo.description", "texts.title", "texts.description", "texts.subtitle"}
            assert home_variables == expected_home, f"–û–∂–∏–¥–∞–ª–æ—Å—å {expected_home}, –ø–æ–ª—É—á–µ–Ω–æ {home_variables}"
            print(f"    –ù–∞–π–¥–µ–Ω–æ {len(home_variables)} –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ home.html")
            
            about_variables = parser.extract_variables_from_file(str(public_dir / "about.html"))
            expected_about = {"seo.title", "texts.title", "texts.content", "texts.phone", "texts.address"}
            assert about_variables == expected_about, f"–û–∂–∏–¥–∞–ª–æ—Å—å {expected_about}, –ø–æ–ª—É—á–µ–Ω–æ {about_variables}"
            print(f"    –ù–∞–π–¥–µ–Ω–æ {len(about_variables)} –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ about.html")
            
            # –¢–µ—Å—Ç 2: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ –ø—É—Ç–∏
            print("  ‚úì –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ –ø—É—Ç–∏...")
            home_page = parser.get_page_from_path(str(public_dir / "home.html"))
            assert home_page == "home", f"–û–∂–∏–¥–∞–ª–æ—Å—å 'home', –ø–æ–ª—É—á–µ–Ω–æ '{home_page}'"
            
            about_page = parser.get_page_from_path(str(public_dir / "about.html"))
            assert about_page == "about", f"–û–∂–∏–¥–∞–ª–æ—Å—å 'about', –ø–æ–ª—É—á–µ–Ω–æ '{about_page}'"
            print(f"    –°—Ç—Ä–∞–Ω–∏—Ü–∞ home: {home_page}")
            print(f"    –°—Ç—Ä–∞–Ω–∏—Ü–∞ about: {about_page}")
            
            # –¢–µ—Å—Ç 3: –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤
            print("  ‚úì –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤...")
            all_variables = parser.parse_all_templates()
            assert "home" in all_variables, "–°—Ç—Ä–∞–Ω–∏—Ü–∞ 'home' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            assert "about" in all_variables, "–°—Ç—Ä–∞–Ω–∏—Ü–∞ 'about' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            print(f"    –ù–∞–π–¥–µ–Ω–æ {len(all_variables)} —Å—Ç—Ä–∞–Ω–∏—Ü —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏")
            
            # –¢–µ—Å—Ç 4: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
            print("  ‚úì –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞...")
            syntax_issues = parser.validate_template_syntax(str(public_dir / "home.html"))
            assert not syntax_issues['unclosed_tags'], "–ù–∞–π–¥–µ–Ω—ã –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏"
            assert not syntax_issues['invalid_syntax'], "–ù–∞–π–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å"
            print("    –°–∏–Ω—Ç–∞–∫—Å–∏—Å —à–∞–±–ª–æ–Ω–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            
            print("‚úÖ –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False


def test_template_parser_variable_filtering():
    """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö...")
    
    try:
        parser = TemplateParser()
        
        # –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        system_vars = ["lang", "request", "supported_languages", "loop.index", "temp"]
        for var in system_vars:
            assert not parser._is_parseable_variable(var), f"–°–∏—Å—Ç–µ–º–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var} –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø–∞—Ä—Å–∏—Ç—å—Å—è"
        
        # –¢–µ—Å—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–µ–∑ namespace
        no_namespace = ["title", "description", "content"]
        for var in no_namespace:
            assert not parser._is_parseable_variable(var), f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –±–µ–∑ namespace {var} –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø–∞—Ä—Å–∏—Ç—å—Å—è"
        
        # –¢–µ—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        valid_vars = ["texts.title", "seo.description", "texts.phone"]
        for var in valid_vars:
            assert parser._is_parseable_variable(var), f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var} –¥–æ–ª–∂–Ω–∞ –ø–∞—Ä—Å–∏—Ç—å—Å—è"
        
        # –¢–µ—Å—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö namespace
        invalid_vars = ["images.logo", "config.setting", "debug.info"]
        for var in invalid_vars:
            assert not parser._is_parseable_variable(var), f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var} –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø–∞—Ä—Å–∏—Ç—å—Å—è"
        
        print("‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {e}")
        return False


def test_template_parser_database_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É texts –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
        execute("DELETE FROM texts WHERE page IN ('test_home', 'test_about')")
        
        parser = TemplateParser()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        test_data = [
            ("test_home", "title", "en", "Test Home Title"),
            ("test_home", "title", "ru", "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"),
            ("test_about", "content", "en", "Test About Content"),
        ]
        
        for page, key, lang, value in test_data:
            execute(
                "INSERT OR REPLACE INTO texts (page, key, lang, value) VALUES (?, ?, ?, ?)",
                (page, key, lang, value)
            )
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –ë–î
        print("  ‚úì –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –ë–î...")
        db_variables = parser.get_database_variables("test_home")
        assert "test_home" in db_variables, "–°—Ç—Ä–∞–Ω–∏—Ü–∞ test_home –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î"
        assert "title" in db_variables["test_home"], "–ö–ª—é—á title –Ω–µ –Ω–∞–π–¥–µ–Ω"
        assert db_variables["test_home"]["title"]["en"] == "Test Home Title", "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è en"
        assert db_variables["test_home"]["title"]["ru"] == "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫", "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è ru"
        print("    –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –ë–î –ø–æ–ª—É—á–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        all_db_variables = parser.get_database_variables()
        assert "test_home" in all_db_variables, "test_home –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ"
        assert "test_about" in all_db_variables, "test_about –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ"
        print(f"    –ù–∞–π–¥–µ–Ω–æ {len(all_db_variables)} —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –ë–î")
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        execute("DELETE FROM texts WHERE page IN ('test_home', 'test_about')")
        
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ë–î: {e}")
        return False


def test_template_parser_sync_functionality():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
    
    try:
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        execute("DELETE FROM texts WHERE page = 'test_sync'")
        
        parser = TemplateParser()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è —Ç–µ—Å—Ç–∞
        with tempfile.NamedTemporaryFile(mode='w', suffix='.html', delete=False, encoding='utf-8') as f:
            f.write("""
<!DOCTYPE html>
<html>
<head>
    <title>{{ seo.title }}</title>
</head>
<body>
    <h1>{{ texts.title }}</h1>
    <p>{{ texts.description }}</p>
    <p>{{ texts.new_field }}</p>
</body>
</html>
            """)
            temp_file = f.name
        
        try:
            # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥ parse_all_templates –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            original_parse_all = parser.parse_all_templates
            parser.parse_all_templates = lambda: {"test_sync": {"seo.title", "texts.title", "texts.description", "texts.new_field"}}
            
            # –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            print("  ‚úì –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö...")
            results = parser.sync_variables_to_database(['en', 'ru', 'ua'])
            
            assert results['parsed_pages'] == 1, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ 1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
            assert results['added_variables'] > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"
            assert results['errors'] == 0, "–ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—à–∏–±–æ–∫"
            print(f"    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {results}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ë–î
            db_vars = parser.get_database_variables("test_sync")
            assert "test_sync" in db_vars, "–°—Ç—Ä–∞–Ω–∏—Ü–∞ test_sync –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î"
            assert "title" in db_vars["test_sync"], "–ö–ª—é—á title –Ω–µ –Ω–∞–π–¥–µ–Ω"
            assert "description" in db_vars["test_sync"], "–ö–ª—é—á description –Ω–µ –Ω–∞–π–¥–µ–Ω"
            assert "new_field" in db_vars["test_sync"], "–ö–ª—é—á new_field –Ω–µ –Ω–∞–π–¥–µ–Ω"
            print("    –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ë–î")
            
            # –¢–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
            print("  ‚úì –¢–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
            results2 = parser.sync_variables_to_database(['en', 'ru', 'ua'])
            assert results2['skipped_variables'] > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"
            print(f"    –ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {results2}")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            parser.parse_all_templates = original_parse_all
            
        finally:
            # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            execute("DELETE FROM texts WHERE page = 'test_sync'")
            os.unlink(temp_file)
        
        print("‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        return False


def test_template_parser_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
    
    try:
        parser = TemplateParser()
        
        # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
        print("  ‚úì –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞...")
        variables = parser.extract_variables_from_file("nonexistent.html")
        assert variables == set(), "–î–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –ø—É—Å—Ç–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ"
        print("    –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø—É—Ç–∏
        print("  ‚úì –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø—É—Ç–∏...")
        page = parser.get_page_from_path("invalid/path/file.html")
        assert page == "unknown", "–î–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 'unknown'"
        print("    –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        print("  ‚úì –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞...")
        with tempfile.NamedTemporaryFile(mode='w', suffix='.html', delete=False, encoding='utf-8') as f:
            f.write("""
<!DOCTYPE html>
<html>
<body>
    {% if texts.title %}
    <h1>{{ texts.title }}</h1>
    <!-- –ù–µ–∑–∞–∫—Ä—ã—Ç—ã–π —Ç–µ–≥ if -->
    <p>{{ texts.description }}</p>
</body>
</html>
            """)
            temp_file = f.name
        
        try:
            issues = parser.validate_template_syntax(temp_file)
            assert issues['unclosed_tags'], "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏"
            print("    –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
        finally:
            os.unlink(temp_file)
        
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {e}")
        return False


def test_template_parser_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Å–µ—Ä–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Å–µ—Ä–∞...")
    
    try:
        import time
        
        parser = TemplateParser()
        
        # –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
        print("  ‚úì –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
        start_time = time.time()
        
        # –ü–∞—Ä—Å–∏–º —Ä–µ–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –ø—Ä–æ–µ–∫—Ç–∞
        variables = parser.parse_all_templates()
        
        end_time = time.time()
        parse_time = end_time - start_time
        
        print(f"    –í—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {parse_time:.3f} —Å–µ–∫—É–Ω–¥")
        print(f"    –ù–∞–π–¥–µ–Ω–æ {len(variables)} —Å—Ç—Ä–∞–Ω–∏—Ü —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä—Å–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—ã—Å—Ç—Ä–æ
        assert parse_time < 5.0, f"–ü–∞—Ä—Å–∏–Ω–≥ —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π: {parse_time:.3f} —Å–µ–∫—É–Ω–¥"
        
        # –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        print("  ‚úì –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
        start_time = time.time()
        
        results = parser.sync_variables_to_database(['en', 'ru', 'ua'])
        
        end_time = time.time()
        sync_time = end_time - start_time
        
        print(f"    –í—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {sync_time:.3f} —Å–µ–∫—É–Ω–¥")
        print(f"    –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {results}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—ã—Å—Ç—Ä–æ
        assert sync_time < 10.0, f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–∞—è: {sync_time:.3f} —Å–µ–∫—É–Ω–¥"
        
        print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä—Å–µ—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤")
    print("=" * 50)
    
    tests = [
        test_template_parser_basic_functionality,
        test_template_parser_variable_filtering,
        test_template_parser_database_integration,
        test_template_parser_sync_functionality,
        test_template_parser_error_handling,
        test_template_parser_performance
    ]
    
    passed = 0
    failed = 0
    
    for test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_func.__name__}: {e}")
            failed += 1
        print()
    
    print("=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    print(f"   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed/(passed+failed)*100:.1f}%")
    
    if failed == 0:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)