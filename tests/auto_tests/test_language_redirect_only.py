#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ç–æ–ª—å–∫–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–µ
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏–∫—É —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
"""

import requests
import sys
import os
from unittest.mock import Mock

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))

def test_language_redirect_logic():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —è–∑—ã–∫–∞"""
    print("üß™ –¢–ï–°–¢ –õ–û–ì–ò–ö–ò –†–ï–î–ò–†–ï–ö–¢–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞...")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    from app.auth.routes import get_language_from_url, get_cms_redirect_url
    
    test_cases = [
        # (url_path, expected_lang, expected_redirect)
        ("/en/login", "en", "/cms/en/"),
        ("/ru/login", "ru", "/cms/ru/"),
        ("/ua/login", "ua", "/cms/ua/"),
        ("/en/", "en", "/cms/en/"),
        ("/ru/", "ru", "/cms/ru/"),
        ("/ua/", "ua", "/cms/ua/"),
        ("/en", "en", "/cms/en/"),
        ("/ru", "ru", "/cms/ru/"),
        ("/ua", "ua", "/cms/ua/"),
        ("/login", "en", "/cms/en/"),  # —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        ("/", "en", "/cms/en/"),       # —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    ]
    
    results = []
    
    for url_path, expected_lang, expected_redirect in test_cases:
        print(f"\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {url_path}")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ Request
            mock_request = Mock()
            mock_request.url.path = url_path
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
            detected_lang = get_language_from_url(mock_request)
            print(f"   üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —è–∑—ã–∫: {detected_lang} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_lang})")
            
            if detected_lang != expected_lang:
                print(f"   ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞")
                results.append(f"‚ùå {url_path}: —è–∑—ã–∫ {detected_lang} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_lang})")
                continue
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é URL —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
            redirect_url = get_cms_redirect_url(detected_lang)
            print(f"   üîÑ URL —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞: {redirect_url} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_redirect})")
            
            if redirect_url == expected_redirect:
                print(f"   ‚úÖ –†–µ–¥–∏—Ä–µ–∫—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                results.append(f"‚úÖ {url_path}: {detected_lang} -> {redirect_url}")
            else:
                print(f"   ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç")
                results.append(f"‚ùå {url_path}: {redirect_url} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_redirect})")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            results.append(f"‚ùå {url_path}: –û—à–∏–±–∫–∞ - {e}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\nüìä –û–¢–ß–ï–¢ –ü–û –õ–û–ì–ò–ö–ï –†–ï–î–ò–†–ï–ö–¢–ê:")
    print(f"{'='*50}")
    
    success_count = sum(1 for result in results if result.startswith("‚úÖ"))
    error_count = sum(1 for result in results if result.startswith("‚ùå"))
    total_count = len(results)
    
    for result in results:
        print(f"   {result}")
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count} —É—Å–ø–µ—à–Ω–æ, {error_count} –æ—à–∏–±–æ–∫ –∏–∑ {total_count} —Ç–µ—Å—Ç–æ–≤")
    
    if success_count == total_count:
        print("üéâ –õ–û–ì–ò–ö–ê –†–ï–î–ò–†–ï–ö–¢–ê –†–ê–ë–û–¢–ê–ï–¢ –ü–†–ê–í–ò–õ–¨–ù–û!")
        return True
    else:
        print("‚ö†Ô∏è  –õ–û–ì–ò–ö–ê –†–ï–î–ò–†–ï–ö–¢–ê –ò–ú–ï–ï–¢ –ü–†–û–ë–õ–ï–ú–´")
        return False

def test_middleware_language_detection():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ –≤ middleware"""
    print("\nüß™ –¢–ï–°–¢ MIDDLEWARE: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞...")
    
    from app.site.middleware import LanguageMiddleware
    
    # –°–æ–∑–¥–∞–µ–º middleware
    middleware = LanguageMiddleware(None)
    
    test_cases = [
        # (url_path, expected_lang)
        ("/en/login", "en"),
        ("/ru/login", "ru"),
        ("/ua/login", "ua"),
        ("/en/", "en"),
        ("/ru/", "ru"),
        ("/ua/", "ua"),
        ("/en", "en"),
        ("/ru", "ru"),
        ("/ua", "ua"),
        ("/login", "en"),  # —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        ("/", "en"),       # —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    ]
    
    results = []
    
    for url_path, expected_lang in test_cases:
        print(f"   üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {url_path}")
        
        try:
            detected_lang = middleware.extract_language_from_url(url_path)
            print(f"      –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —è–∑—ã–∫: {detected_lang} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_lang})")
            
            if detected_lang == expected_lang:
                print(f"      ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ")
                results.append(f"‚úÖ {url_path}: {detected_lang}")
            else:
                print(f"      ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                results.append(f"‚ùå {url_path}: {detected_lang} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_lang})")
                
        except Exception as e:
            print(f"      ‚ùå –û—à–∏–±–∫–∞: {e}")
            results.append(f"‚ùå {url_path}: –û—à–∏–±–∫–∞ - {e}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\nüìä –û–¢–ß–ï–¢ –ü–û MIDDLEWARE:")
    for result in results:
        print(f"   {result}")
    
    success_count = sum(1 for result in results if result.startswith("‚úÖ"))
    total_count = len(results)
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    return success_count == total_count

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê –õ–û–ì–ò–ö–ò –†–ï–î–ò–†–ï–ö–¢–ê")
    print("="*50)
    
    try:
        # –¢–µ—Å—Ç 1: –õ–æ–≥–∏–∫–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
        test1_result = test_language_redirect_logic()
        
        # –¢–µ—Å—Ç 2: Middleware
        test2_result = test_middleware_language_detection()
        
        # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"{'='*30}")
        
        if test1_result and test2_result:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –õ–û–ì–ò–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –õ–æ–≥–∏–∫–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            print("‚úÖ Middleware –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            print("\nüí° –í–´–í–û–î: –ü—Ä–æ–±–ª–µ–º–∞ –ù–ï –≤ –ª–æ–≥–∏–∫–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞!")
            print("üí° –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å–µ—Ä–≤–µ—Ä–∞")
            return True
        else:
            print("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –õ–û–ì–ò–ö–ò –ù–ï –ü–†–û–ô–î–ï–ù–´")
            if not test1_result:
                print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ª–æ–≥–∏–∫–æ–π —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞")
            if not test2_result:
                print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å middleware")
            return False
            
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
