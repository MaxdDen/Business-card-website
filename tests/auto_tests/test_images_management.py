#!/usr/bin/env python3
"""
–ê–≤—Ç–æ—Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –ó–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
2. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ WebP
3. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
4. –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
5. –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""

import os
import sys
import json
import time
import requests
from PIL import Image
import io
import tempfile
import shutil

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..'))

def create_test_image(width=800, height=600, format='JPEG'):
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏"""
    img = Image.new('RGB', (width, height), color='red')
    img_bytes = io.BytesIO()
    img.save(img_bytes, format=format)
    img_bytes.seek(0)
    return img_bytes.getvalue()

def create_large_test_image():
    """–°–æ–∑–¥–∞—Ç—å –±–æ–ª—å—à–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (>2MB)"""
    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 2000x2000 –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
    img = Image.new('RGB', (2000, 2000), color='blue')
    img_bytes = io.BytesIO()
    img.save(img_bytes, format='JPEG', quality=95)
    img_bytes.seek(0)
    return img_bytes.getvalue()

def test_image_upload_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    base_url = "http://localhost:8000"
    
    # –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    print("  ‚úì –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    test_image = create_test_image()
    
    files = {'file': ('test.jpg', test_image, 'image/jpeg')}
    data = {'image_type': 'logo'}
    
    response = requests.post(f"{base_url}/cms/api/images/upload", files=files, data=data)
    
    if response.status_code == 200:
        result = response.json()
        if result.get('success'):
            print("    ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return result['image']['id']
        else:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {result.get('message')}")
            return None
    else:
        print(f"    ‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
        return None

def test_image_size_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
    print("  ‚úì –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞")
    
    base_url = "http://localhost:8000"
    large_image = create_large_test_image()
    
    files = {'file': ('large.jpg', large_image, 'image/jpeg')}
    data = {'image_type': 'logo'}
    
    response = requests.post(f"{base_url}/cms/api/images/upload", files=files, data=data)
    
    if response.status_code == 400:
        result = response.json()
        if "—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π" in result.get('message', '').lower():
            print("    ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print(f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {result.get('message')}")
            return False
    else:
        print(f"    ‚ùå –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ 400, –ø–æ–ª—É—á–µ–Ω –∫–æ–¥: {response.status_code}")
        return False

def test_image_format_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞"""
    print("  ‚úì –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞")
    
    base_url = "http://localhost:8000"
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤–º–µ—Å—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    text_content = b"This is not an image"
    
    files = {'file': ('test.txt', text_content, 'text/plain')}
    data = {'image_type': 'logo'}
    
    response = requests.post(f"{base_url}/cms/api/images/upload", files=files, data=data)
    
    if response.status_code == 400:
        result = response.json()
        if "–Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º" in result.get('message', '').lower():
            print("    ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print(f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {result.get('message')}")
            return False
    else:
        print(f"    ‚ùå –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ 400, –ø–æ–ª—É—á–µ–Ω –∫–æ–¥: {response.status_code}")
        return False

def test_image_optimization(image_id):
    """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    print("  ‚úì –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    base_url = "http://localhost:8000"
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
    response = requests.get(f"{base_url}/cms/api/images")
    if response.status_code == 200:
        result = response.json()
        if result.get('success'):
            images = result['images']
            test_image = next((img for img in images if img['id'] == image_id), None)
            
            if test_image:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                optimized_path = test_image['path']
                if os.path.exists(optimized_path):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ WebP —Ñ–∞–π–ª
                    if optimized_path.endswith('.webp'):
                        print("    ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –≤ WebP —Ñ–æ—Ä–º–∞—Ç")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        with Image.open(optimized_path) as img:
                            width, height = img.size
                            if width <= 1920:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞
                                print(f"    ‚úÖ –†–∞–∑–º–µ—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {width}x{height}")
                                return True
                            else:
                                print(f"    ‚ùå –®–∏—Ä–∏–Ω–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç: {width}")
                                return False
                    else:
                        print(f"    ‚ùå –§–∞–π–ª –Ω–µ –≤ WebP —Ñ–æ—Ä–º–∞—Ç–µ: {optimized_path}")
                        return False
                else:
                    print(f"    ‚ùå –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {optimized_path}")
                    return False
            else:
                print("    ‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return False
        else:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {result.get('message')}")
            return False
    else:
        print(f"    ‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {response.status_code}")
        return False

def test_image_management():
    """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
    print("  ‚úì –¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
    
    base_url = "http://localhost:8000"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    response = requests.get(f"{base_url}/cms/api/images")
    if response.status_code == 200:
        result = response.json()
        if result.get('success'):
            images = result['images']
            print(f"    ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            if images:
                image = images[0]
                required_fields = ['id', 'name', 'path', 'original_path', 'type', 'order']
                missing_fields = [field for field in required_fields if field not in image]
                
                if not missing_fields:
                    print("    ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                    return images[0]['id']
                else:
                    print(f"    ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
                    return None
            else:
                print("    ‚ö†Ô∏è –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return None
        else:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {result.get('message')}")
            return None
    else:
        print(f"    ‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
        return None

def test_image_deletion(image_id):
    """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    print("  ‚úì –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    base_url = "http://localhost:8000"
    
    # –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    response = requests.delete(f"{base_url}/cms/api/images/{image_id}")
    
    if response.status_code == 200:
        result = response.json()
        if result.get('success'):
            print("    ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω–æ
            response = requests.get(f"{base_url}/cms/api/images")
            if response.status_code == 200:
                result = response.json()
                if result.get('success'):
                    images = result['images']
                    remaining_image = next((img for img in images if img['id'] == image_id), None)
                    if not remaining_image:
                        print("    ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
                        return True
                    else:
                        print("    ‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ –µ—â–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ")
                        return False
                else:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è: {result.get('message')}")
                    return False
            else:
                print(f"    ‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {response.status_code}")
                return False
        else:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {result.get('message')}")
            return False
    else:
        print(f"    ‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {response.status_code}")
        return False

def test_image_order_management():
    """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    print("  ‚úì –¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    base_url = "http://localhost:8000"
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–∞
    test_images = []
    for i in range(3):
        test_image = create_test_image(width=400 + i*100, height=300 + i*50)
        files = {'file': (f'slider_{i}.jpg', test_image, 'image/jpeg')}
        data = {'image_type': 'slider'}
        
        response = requests.post(f"{base_url}/cms/api/images/upload", files=files, data=data)
        if response.status_code == 200:
            result = response.json()
            if result.get('success'):
                test_images.append(result['image'])
    
    if len(test_images) >= 2:
        print(f"    ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(test_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞
        first_image = test_images[0]
        new_order = 999
        
        form_data = {'new_order': str(new_order)}
        response = requests.put(f"{base_url}/cms/api/images/{first_image['id']}/order", data=form_data)
        
        if response.status_code == 200:
            result = response.json()
            if result.get('success'):
                print("    ‚úÖ –ü–æ—Ä—è–¥–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä—è–¥–æ–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
                response = requests.get(f"{base_url}/cms/api/images/by-type/slider")
                if response.status_code == 200:
                    result = response.json()
                    if result.get('success'):
                        images = result['images']
                        updated_image = next((img for img in images if img['id'] == first_image['id']), None)
                        if updated_image and updated_image['order'] == new_order:
                            print("    ‚úÖ –ü–æ—Ä—è–¥–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î")
                            
                            # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            for img in test_images:
                                requests.delete(f"{base_url}/cms/api/images/{img['id']}")
                            
                            return True
                        else:
                            print("    ‚ùå –ü–æ—Ä—è–¥–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è –≤ –ë–î")
                            return False
                    else:
                        print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Ç–∏–ø—É: {result.get('message')}")
                        return False
                else:
                    print(f"    ‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {response.status_code}")
                    return False
            else:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞: {result.get('message')}")
                return False
        else:
            print(f"    ‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞: {response.status_code}")
            return False
    else:
        print("    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return False

def test_cache_invalidation():
    """–¢–µ—Å—Ç –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞"""
    print("  ‚úì –¢–µ—Å—Ç –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    base_url = "http://localhost:8000"
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    test_image = create_test_image()
    files = {'file': ('cache_test.jpg', test_image, 'image/jpeg')}
    data = {'image_type': 'logo'}
    
    response = requests.post(f"{base_url}/cms/api/images/upload", files=files, data=data)
    
    if response.status_code == 200:
        result = response.json()
        if result.get('success'):
            image_id = result['image']['id']
            print("    ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—ç—à–∞")
            
            # –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—ç—Ç–æ –¥–æ–ª–∂–Ω–æ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à)
            response = requests.delete(f"{base_url}/cms/api/images/{image_id}")
            
            if response.status_code == 200:
                result = response.json()
                if result.get('success'):
                    print("    ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ, –∫—ç—à –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ
                    response = requests.get(f"{base_url}/cms/api/images")
                    if response.status_code == 200:
                        result = response.json()
                        if result.get('success'):
                            images = result['images']
                            deleted_image = next((img for img in images if img['id'] == image_id), None)
                            if not deleted_image:
                                print("    ‚úÖ –ö—ç—à –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                                return True
                            else:
                                print("    ‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ –µ—â–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è")
                                return False
                        else:
                            print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞: {result.get('message')}")
                            return False
                    else:
                        print(f"    ‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—ç—à–∞: {response.status_code}")
                        return False
                else:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞ –∫—ç—à–∞: {result.get('message')}")
                    return False
            else:
                print(f"    ‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∞ –∫—ç—à–∞: {response.status_code}")
                return False
        else:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∞ –∫—ç—à–∞: {result.get('message')}")
            return False
    else:
        print(f"    ‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–ª—è —Ç–µ—Å—Ç–∞ –∫—ç—à–∞: {response.status_code}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
    try:
        response = requests.get("http://localhost:8000/health", timeout=5)
        if response.status_code != 200:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ /health")
            return False
    except requests.exceptions.RequestException:
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:8000")
        return False
    
    print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print()
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
    tests = [
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞", test_image_size_validation),
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞", test_image_format_validation),
        ("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", test_image_upload_validation),
        ("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏", test_image_management),
        ("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", lambda: test_image_optimization(test_image_upload_validation())),
        ("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–æ–º", test_image_order_management),
        ("–ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞", test_cache_invalidation),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"üß™ {test_name}")
        try:
            result = test_func()
            if result:
                passed += 1
                print(f"  ‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
            else:
                print(f"  ‚ùå {test_name} - –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"  ‚ùå {test_name} - –û–®–ò–ë–ö–ê: {e}")
        print()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print(f"‚ö†Ô∏è {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
