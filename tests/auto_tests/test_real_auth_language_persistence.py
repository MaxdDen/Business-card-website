#!/usr/bin/env python3
"""
–†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —è–∑—ã–∫–∞
"""

import requests
import sys
import os
import time
from urllib.parse import urljoin

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))

def test_real_auth_language_persistence():
    """–†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    print("üß™ –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    
    base_url = "http://localhost:8000"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_email = "admin@example.com"
    test_password = "admin123"  # –ü–æ–ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å
    
    # –°–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    languages = ["en", "ru", "ua"]
    
    results = []
    
    for lang in languages:
        print(f"\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —è–∑—ã–∫–∞: {lang}")
        
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–æ–≥–∏–Ω–∞ —Å —è–∑—ã–∫–æ–≤—ã–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
            login_url = f"{base_url}/{lang}/login"
            print(f"   üîó –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {login_url}")
            
            response = requests.get(login_url, timeout=10)
            if response.status_code != 200:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ {login_url}: {response.status_code}")
                results.append(f"‚ùå {lang}: –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–æ–≥–∏–Ω–∞")
                continue
            
            print(f"   ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–∏–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —è–∑—ã–∫–∞ {lang}")
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ HTML –µ—Å—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —è–∑—ã–∫–æ–≤
            html_content = response.text
            if f'/{lang}/login' in html_content:
                print(f"   ‚úÖ –¢–µ–∫—É—â–∏–π —è–∑—ã–∫ {lang} –Ω–∞–π–¥–µ–Ω –≤ HTML")
            else:
                print(f"   ‚ö†Ô∏è  –¢–µ–∫—É—â–∏–π —è–∑—ã–∫ {lang} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ HTML")
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ –ª–æ–≥–∏–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL
            if f'action="/{lang}/login"' in html_content:
                print(f"   ‚úÖ –§–æ—Ä–º–∞ –ª–æ–≥–∏–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL: /{lang}/login")
            else:
                print(f"   ‚ö†Ô∏è  –§–æ—Ä–º–∞ –ª–æ–≥–∏–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            
            # 4. –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            print(f"   üîê –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è cookies
            session = requests.Session()
            
            # –ü–æ–ª—É—á–∞–µ–º CSRF —Ç–æ–∫–µ–Ω - —Å–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞–µ–º GET –∑–∞–ø—Ä–æ—Å
            login_page_response = session.get(login_url)
            csrf_token = ""
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ CSRF —Ç–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ cookies
            csrf_cookie = session.cookies.get('csrftoken')
            if csrf_cookie:
                csrf_token = csrf_cookie
                print(f"   ‚úÖ CSRF —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∏–∑ cookies: {csrf_token[:10]}...")
            else:
                print(f"   ‚ö†Ô∏è  CSRF —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ cookies")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ HTML
                if 'name="csrf_token"' in login_page_response.text:
                    import re
                    csrf_match = re.search(r'name="csrf_token" value="([^"]+)"', login_page_response.text)
                    if csrf_match:
                        csrf_token = csrf_match.group(1)
                        print(f"   ‚úÖ CSRF —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∏–∑ HTML: {csrf_token[:10]}...")
                    else:
                        print(f"   ‚ö†Ô∏è  CSRF —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ HTML")
                else:
                    print(f"   ‚ö†Ô∏è  CSRF —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–æ—Ä–º–µ")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º POST –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            auth_data = {
                'email': test_email,
                'password': test_password
            }
            
            if csrf_token:
                auth_data['csrf_token'] = csrf_token
            
            auth_response = session.post(login_url, data=auth_data, allow_redirects=False)
            
            print(f"   üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {auth_response.status_code}")
            
            if auth_response.status_code == 302:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
                redirect_url = auth_response.headers.get('Location', '')
                print(f"   üîÑ URL —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞: {redirect_url}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —è–∑—ã–∫–æ–≤–æ–π –ø—Ä–µ—Ñ–∏–∫—Å
                expected_redirect = f"/cms/{lang}/"
                if expected_redirect in redirect_url:
                    print(f"   ‚úÖ –†–µ–¥–∏—Ä–µ–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —è–∑—ã–∫–æ–≤–æ–π –ø—Ä–µ—Ñ–∏–∫—Å: {expected_redirect}")
                    results.append(f"‚úÖ {lang}: –†–µ–¥–∏—Ä–µ–∫—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                else:
                    print(f"   ‚ùå –†–µ–¥–∏—Ä–µ–∫—Ç –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —è–∑—ã–∫–æ–≤–æ–π –ø—Ä–µ—Ñ–∏–∫—Å")
                    print(f"   ‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_redirect}")
                    print(f"   ‚ùå –ü–æ–ª—É—á–µ–Ω–æ: {redirect_url}")
                    results.append(f"‚ùå {lang}: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç - {redirect_url}")
            elif auth_response.status_code == 200:
                # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫—É
                if 'error' in auth_response.text or 'Invalid' in auth_response.text:
                    print(f"   ‚ö†Ô∏è  –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å (–≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
                    print(f"   ‚ö†Ô∏è  –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                    results.append(f"‚ö†Ô∏è  {lang}: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
                else:
                    print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                    results.append(f"‚ùå {lang}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            else:
                print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {auth_response.status_code}")
                results.append(f"‚ùå {lang}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ - {auth_response.status_code}")
            
        except requests.exceptions.RequestException as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —è–∑—ã–∫–∞ {lang}: {e}")
            results.append(f"‚ùå {lang}: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ - {e}")
        except Exception as e:
            print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è —è–∑—ã–∫–∞ {lang}: {e}")
            results.append(f"‚ùå {lang}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ - {e}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    print(f"{'='*50}")
    
    success_count = sum(1 for result in results if result.startswith("‚úÖ"))
    warning_count = sum(1 for result in results if result.startswith("‚ö†Ô∏è"))
    error_count = sum(1 for result in results if result.startswith("‚ùå"))
    total_count = len(results)
    
    for result in results:
        print(f"   {result}")
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count} —É—Å–ø–µ—à–Ω–æ, {warning_count} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π, {error_count} –æ—à–∏–±–æ–∫ –∏–∑ {total_count} —Ç–µ—Å—Ç–æ–≤")
    
    if success_count > 0:
        print("üéâ –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù! –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        return True
    else:
        print("‚ö†Ô∏è  –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.")
        return False

def test_language_detection_in_url():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ –∏–∑ URL"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ –∏–∑ URL...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_language_from_url
    from app.auth.routes import get_language_from_url
    from fastapi import Request
    from unittest.mock import Mock
    
    test_cases = [
        ("/en/login", "en"),
        ("/ru/login", "ru"), 
        ("/ua/login", "ua"),
        ("/en/", "en"),
        ("/ru/", "ru"),
        ("/ua/", "ua"),
        ("/en", "en"),
        ("/ru", "ru"),
        ("/ua", "ua"),
        ("/login", "en"),  # —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        ("/", "en"),       # —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    ]
    
    results = []
    
    for url_path, expected_lang in test_cases:
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ Request
        mock_request = Mock()
        mock_request.url.path = url_path
        
        try:
            detected_lang = get_language_from_url(mock_request)
            if detected_lang == expected_lang:
                print(f"   ‚úÖ {url_path} -> {detected_lang} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_lang})")
                results.append(f"‚úÖ {url_path}: {detected_lang}")
            else:
                print(f"   ‚ùå {url_path} -> {detected_lang} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_lang})")
                results.append(f"‚ùå {url_path}: {detected_lang} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_lang})")
        except Exception as e:
            print(f"   ‚ùå {url_path} -> –û—à–∏–±–∫–∞: {e}")
            results.append(f"‚ùå {url_path}: –û—à–∏–±–∫–∞ - {e}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\nüìä –û–¢–ß–ï–¢ –ü–û –û–ü–†–ï–î–ï–õ–ï–ù–ò–Æ –Ø–ó–´–ö–ê:")
    for result in results:
        print(f"   {result}")
    
    success_count = sum(1 for result in results if result.startswith("‚úÖ"))
    total_count = len(results)
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    return success_count == total_count

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    print("üöÄ –ó–ê–ü–£–°–ö –†–ï–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ê: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    print("="*70)
    
    try:
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ –∏–∑ URL
        test1_result = test_language_detection_in_url()
        
        # –¢–µ—Å—Ç 2: –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        test2_result = test_real_auth_language_persistence()
        
        # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"{'='*30}")
        
        if test1_result and test2_result:
            print("üéâ –í–°–ï –†–ï–ê–õ–¨–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –∏–∑ URL —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ –†–µ–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —è–∑—ã–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –†–ï–ê–õ–¨–ù–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
            if not test1_result:
                print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —è–∑—ã–∫–∞ –∏–∑ URL")
            if not test2_result:
                print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π")
            return False
            
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
