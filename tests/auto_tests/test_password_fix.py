#!/usr/bin/env python3
"""
–ê–≤—Ç–æ—Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ —Å –¥–ª–∏–Ω–æ–π –ø–∞—Ä–æ–ª—è –≤ bcrypt
"""

import sys
import os
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..'))

from app.auth.security import hash_password, verify_password

def test_long_password_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π...")
    
    # –°–æ–∑–¥–∞–µ–º –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å (–±–æ–ª–µ–µ 72 –±–∞–π—Ç)
    long_password = "a" * 100  # 100 —Å–∏–º–≤–æ–ª–æ–≤ = 100 –±–∞–π—Ç –≤ UTF-8
    print(f"   –°–æ–∑–¥–∞–Ω –¥–ª–∏–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: {len(long_password)} —Å–∏–º–≤–æ–ª–æ–≤ ({len(long_password.encode('utf-8'))} –±–∞–π—Ç)")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        print("   –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è...")
        password_hash = hash_password(long_password)
        print(f"   ‚úÖ –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: {password_hash[:30]}...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
        print("   –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è...")
        is_valid = verify_password(long_password, password_hash)
        print(f"   ‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {is_valid}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
        wrong_password = "b" * 100
        is_invalid = verify_password(wrong_password, password_hash)
        print(f"   ‚úÖ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω: {not is_invalid}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è: {e}")
        return False

def test_unicode_password_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–æ–ª–µ–π —Å Unicode —Å–∏–º–≤–æ–ª–∞–º–∏"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Unicode –ø–∞—Ä–æ–ª–µ–π...")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–æ–ª—å —Å Unicode —Å–∏–º–≤–æ–ª–∞–º–∏ (–∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª –º–æ–∂–µ—Ç –±—ã—Ç—å 2-4 –±–∞–π—Ç–∞)
    unicode_password = "–ø–∞—Ä–æ–ª—å123" + "üîê" * 20  # –ö–∏—Ä–∏–ª–ª–∏—Ü–∞ + —ç–º–æ–¥–∑–∏
    print(f"   –°–æ–∑–¥–∞–Ω Unicode –ø–∞—Ä–æ–ª—å: {len(unicode_password)} —Å–∏–º–≤–æ–ª–æ–≤ ({len(unicode_password.encode('utf-8'))} –±–∞–π—Ç)")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        print("   –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ Unicode –ø–∞—Ä–æ–ª—è...")
        password_hash = hash_password(unicode_password)
        print(f"   ‚úÖ –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: {password_hash[:30]}...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
        print("   –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é Unicode –ø–∞—Ä–æ–ª—è...")
        is_valid = verify_password(unicode_password, password_hash)
        print(f"   ‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {is_valid}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Unicode –ø–∞—Ä–æ–ª—è: {e}")
        return False

def test_edge_cases():
    """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤...")
    
    test_cases = [
        ("", "–ø—É—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å"),
        ("a" * 72, "–ø–∞—Ä–æ–ª—å —Ä–æ–≤–Ω–æ 72 –±–∞–π—Ç–∞"),
        ("a" * 73, "–ø–∞—Ä–æ–ª—å 73 –±–∞–π—Ç–∞"),
        ("–ø–∞—Ä–æ–ª—å" * 20, "–¥–ª–∏–Ω–Ω—ã–π –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π –ø–∞—Ä–æ–ª—å"),
        ("üîê" * 30, "–ø–∞—Ä–æ–ª—å —Å —ç–º–æ–¥–∑–∏"),
        ("a" * 1000, "–æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å"),
    ]
    
    success_count = 0
    
    for password, description in test_cases:
        try:
            print(f"   –¢–µ—Å—Ç–∏—Ä—É–µ–º {description}...")
            password_hash = hash_password(password)
            is_valid = verify_password(password, password_hash)
            
            if is_valid:
                print(f"   ‚úÖ {description}: OK")
                success_count += 1
            else:
                print(f"   ‚ùå {description}: –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞")
                
        except Exception as e:
            print(f"   ‚ùå {description}: –æ—à–∏–±–∫–∞ - {e}")
    
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(test_cases)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    return success_count == len(test_cases)

def test_fallback_hash():
    """–¢–µ—Å—Ç fallback —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fallback —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å fallback
        test_password = "test_password_123"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        password_hash = hash_password(test_password)
        print(f"   ‚úÖ –•—ç—à —Å–æ–∑–¥–∞–Ω: {password_hash[:30]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ fallback —Ö—ç—à
        if password_hash.startswith("pbkdf2_sha256$"):
            print("   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback —Ö—ç—à (pbkdf2_sha256)")
        else:
            print("   ‚ÑπÔ∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ö—ç—à (bcrypt)")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
        is_valid = verify_password(test_password, password_hash)
        print(f"   ‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {is_valid}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ fallback: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ —Å –¥–ª–∏–Ω–æ–π –ø–∞—Ä–æ–ª—è")
    print("=" * 60)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(level=logging.WARNING)  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏
    
    tests = [
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π", test_long_password_handling),
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ Unicode –ø–∞—Ä–æ–ª–µ–π", test_unicode_password_handling),
        ("–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏", test_edge_cases),
        ("Fallback —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ", test_fallback_hash),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}")
        print("-" * 40)
        
        try:
            if test_func():
                print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                passed += 1
            else:
                print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –û—à–∏–±–∫–∞ —Å –¥–ª–∏–Ω–æ–π –ø–∞—Ä–æ–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
