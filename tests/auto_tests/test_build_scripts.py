#!/usr/bin/env python3
"""
–ê–≤—Ç–æ—Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤ —Å–±–æ—Ä–∫–∏ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å PowerShell —Å–∫—Ä–∏–ø—Ç–æ–≤, Makefile –∏ NPM —Å–∫—Ä–∏–ø—Ç–æ–≤
"""

import os
import sys
import subprocess
import json
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

def test_powershell_scripts_exist():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö PowerShell —Å–∫—Ä–∏–ø—Ç–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PowerShell —Å–∫—Ä–∏–ø—Ç–æ–≤...")
    
    required_scripts = [
        "dev.ps1",
        "run.ps1", 
        "tailwind-watch.ps1",
        "lint.ps1"
    ]
    
    missing_scripts = []
    for script in required_scripts:
        if not os.path.exists(script):
            missing_scripts.append(script)
        else:
            print(f"‚úÖ {script} –Ω–∞–π–¥–µ–Ω")
    
    if missing_scripts:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–∫—Ä–∏–ø—Ç—ã: {missing_scripts}")
        return False
    
    print("‚úÖ –í—Å–µ PowerShell —Å–∫—Ä–∏–ø—Ç—ã –Ω–∞–π–¥–µ–Ω—ã")
    return True

def test_powershell_scripts_syntax():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å PowerShell —Å–∫—Ä–∏–ø—Ç–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å PowerShell —Å–∫—Ä–∏–ø—Ç–æ–≤...")
    
    scripts = ["dev.ps1", "run.ps1", "tailwind-watch.ps1", "lint.ps1"]
    
    for script in scripts:
        if not os.path.exists(script):
            continue
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å PowerShell
            result = subprocess.run([
                "powershell", "-Command", 
                f"Get-Content '{script}' | Out-Null; if ($?) {{ Write-Host 'Syntax OK' }}"
            ], capture_output=True, text=True, timeout=10)
            
            if result.returncode == 0:
                print(f"‚úÖ {script} - —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            else:
                print(f"‚ùå {script} - –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            print(f"‚ö†Ô∏è  {script} - —Ç–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞")
        except Exception as e:
            print(f"‚ùå {script} - –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            return False
    
    print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –≤—Å–µ—Ö PowerShell —Å–∫—Ä–∏–ø—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
    return True

def test_makefile_exists():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ Makefile"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Makefile...")
    
    if not os.path.exists("Makefile"):
        print("‚ùå Makefile –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print("‚úÖ Makefile –Ω–∞–π–¥–µ–Ω")
    return True

def test_makefile_commands():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥ Makefile"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã Makefile...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø—Ä–∞–≤–∫—É
        result = subprocess.run(["make", "help"], capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print("‚úÖ make help —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"‚ö†Ô∏è  make help –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {result.stderr}")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º info
        result = subprocess.run(["make", "info"], capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print("‚úÖ make info —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"‚ö†Ô∏è  make info –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {result.stderr}")
            
    except subprocess.TimeoutExpired:
        print("‚ö†Ô∏è  –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Makefile –∫–æ–º–∞–Ω–¥")
    except FileNotFoundError:
        print("‚ö†Ô∏è  make –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Makefile: {e}")
    
    print("‚úÖ –ö–æ–º–∞–Ω–¥—ã Makefile –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
    return True

def test_package_json_scripts():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å NPM —Å–∫—Ä–∏–ø—Ç–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º NPM —Å–∫—Ä–∏–ø—Ç—ã...")
    
    if not os.path.exists("package.json"):
        print("‚ùå package.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        with open("package.json", "r", encoding="utf-8") as f:
            package_data = json.load(f)
        
        required_scripts = [
            "dev", "run", "tailwind:watch", "lint", 
            "build:css", "clean", "test"
        ]
        
        scripts = package_data.get("scripts", {})
        missing_scripts = []
        
        for script in required_scripts:
            if script not in scripts:
                missing_scripts.append(script)
            else:
                print(f"‚úÖ npm run {script} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
        
        if missing_scripts:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–∫—Ä–∏–ø—Ç—ã: {missing_scripts}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º devDependencies
        dev_deps = package_data.get("devDependencies", {})
        required_deps = ["tailwindcss", "@tailwindcss/cli"]
        
        for dep in required_deps:
            if dep not in dev_deps:
                print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {dep}")
            else:
                print(f"‚úÖ {dep} –≤ devDependencies")
        
        print("‚úÖ NPM —Å–∫—Ä–∏–ø—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        return True
        
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ package.json: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ package.json: {e}")
        return False

def test_readme_exists():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ README.md"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ README.md...")
    
    if not os.path.exists("README.md"):
        print("‚ùå README.md –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    file_size = os.path.getsize("README.md")
    if file_size < 1000:  # –ú–∏–Ω–∏–º—É–º 1KB
        print(f"‚ö†Ô∏è  README.md —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π ({file_size} –±–∞–π—Ç)")
    else:
        print(f"‚úÖ README.md –Ω–∞–π–¥–µ–Ω ({file_size} –±–∞–π—Ç)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
    try:
        with open("README.md", "r", encoding="utf-8") as f:
            content = f.read().lower()
        
        required_sections = [
            "–±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç", "—É—Å—Ç–∞–Ω–æ–≤–∫–∞", "–∑–∞–ø—É—Å–∫", 
            "–∫–æ–º–∞–Ω–¥—ã", "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"
        ]
        
        missing_sections = []
        for section in required_sections:
            if section not in content:
                missing_sections.append(section)
        
        if missing_sections:
            print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ä–∞–∑–¥–µ–ª—ã –≤ README: {missing_sections}")
        else:
            print("‚úÖ README.md —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑–¥–µ–ª—ã")
            
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ README.md: {e}")
    
    return True

def test_environment_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env.example
    if not os.path.exists(".env.example"):
        print("‚ùå .env.example –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    else:
        print("‚úÖ .env.example –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º requirements.txt
    if not os.path.exists("requirements.txt"):
        print("‚ùå requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    else:
        print("‚úÖ requirements.txt –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        try:
            with open("requirements.txt", "r", encoding="utf-8") as f:
                content = f.read()
            
            required_deps = ["fastapi", "uvicorn", "jinja2", "sqlite3"]
            missing_deps = []
            
            for dep in required_deps:
                if dep not in content.lower():
                    missing_deps.append(dep)
            
            if missing_deps:
                print(f"‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {missing_deps}")
            else:
                print("‚úÖ requirements.txt —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
                
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ requirements.txt: {e}")
    
    return True

def test_directory_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    
    required_dirs = [
        "app", "app/auth", "app/cms", "app/site", 
        "app/static", "app/templates", "app/utils", "app/database",
        "tests", "tests/auto_tests", "docs"
    ]
    
    missing_dirs = []
    for dir_path in required_dirs:
        if not os.path.exists(dir_path):
            missing_dirs.append(dir_path)
        else:
            print(f"‚úÖ {dir_path} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    if missing_dirs:
        print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {missing_dirs}")
    else:
        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
    
    return len(missing_dirs) == 0

def test_script_permissions():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∫—Ä–∏–ø—Ç–∞–º"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∫—Ä–∏–ø—Ç–∞–º...")
    
    scripts = ["dev.ps1", "run.ps1", "tailwind-watch.ps1", "lint.ps1"]
    
    for script in scripts:
        if os.path.exists(script):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —á–∏—Ç–∞–µ–º—ã–π
            if os.access(script, os.R_OK):
                print(f"‚úÖ {script} - –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ")
            else:
                print(f"‚ùå {script} - –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ")
                return False
    
    print("‚úÖ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∫—Ä–∏–ø—Ç–∞–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    return True

def run_build_scripts_test():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤ —Å–±–æ—Ä–∫–∏"""
    print("üß™ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ —Å–±–æ—Ä–∫–∏...")
    print("=" * 60)
    
    tests = [
        ("PowerShell —Å–∫—Ä–∏–ø—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç", test_powershell_scripts_exist),
        ("–°–∏–Ω—Ç–∞–∫—Å–∏—Å PowerShell —Å–∫—Ä–∏–ø—Ç–æ–≤", test_powershell_scripts_syntax),
        ("Makefile —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", test_makefile_exists),
        ("–ö–æ–º–∞–Ω–¥—ã Makefile", test_makefile_commands),
        ("NPM —Å–∫—Ä–∏–ø—Ç—ã", test_package_json_scripts),
        ("README.md", test_readme_exists),
        ("–§–∞–π–ª—ã –æ–∫—Ä—É–∂–µ–Ω–∏—è", test_environment_files),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π", test_directory_structure),
        ("–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞", test_script_permissions)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}:")
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå {test_name} - –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name} - –û–®–ò–ë–ö–ê: {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∫—Ä–∏–ø—Ç—ã —Å–±–æ—Ä–∫–∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        return True
    else:
        print(f"‚ö†Ô∏è  {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        return False

if __name__ == "__main__":
    success = run_build_scripts_test()
    sys.exit(0 if success else 1)
