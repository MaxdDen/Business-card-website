#!/usr/bin/env python3
"""
–ê–≤—Ç–æ—Ç–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ header.html

–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ:
1. Header —Å–æ–¥–µ—Ä–∂–∏—Ç —É—Å–ª–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
2. –ü–µ—Ä–µ–≤–æ–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç –¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤ (ru, en, ua)
3. –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è lang –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
"""

import os
import re
import requests
import time
from pathlib import Path


def test_header_contains_translations():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ header.html —Å–æ–¥–µ—Ä–∂–∏—Ç —É—Å–ª–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ header.html...")
    
    header_file = 'app/templates/partials/header.html'
    
    if not os.path.exists(header_file):
        print(f"‚ùå –§–∞–π–ª {header_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    with open(header_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    translation_patterns = [
        r'{{ t\.theme or \'Theme\' }}',
        r'{{ t\.home or \'Home\' }}'
    ]
    
    missing_patterns = []
    for pattern in translation_patterns:
        if not re.search(pattern, content):
            missing_patterns.append(pattern)
    
    if missing_patterns:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–∑ –ë–î: {missing_patterns}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç —Ö–∞—Ä–¥–∫–æ–¥ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (–∏—Å–∫–ª—é—á–∞—è fallback –∑–Ω–∞—á–µ–Ω–∏—è)
    hardcoded_translations = ['–¢–µ–º–∞', '–ì–ª–∞–≤–Ω–∞—è', '–ì–æ–ª–æ–≤–Ω–∞']
    for translation in hardcoded_translations:
        if translation in content:
            print(f"‚ùå –ù–∞–π–¥–µ–Ω —Ö–∞—Ä–¥–∫–æ–¥ –ø–µ—Ä–µ–≤–æ–¥: {translation}")
            return False
    
    print("‚úÖ Header —Å–æ–¥–µ—Ä–∂–∏—Ç —É—Å–ª–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤")
    return True


def test_cms_pages_have_lang_context():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ CMS —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–µ–¥–∞—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é lang"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–¥–∞—á—É –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π lang –≤ CMS...")
    
    cms_pages = [
        '/cms',
        '/cms/texts',
        '/cms/images',
        '/cms/seo',
        '/cms/users'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è (–º–æ–≥—É—Ç –±—ã—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã –Ω–∞ –ª–æ–≥–∏–Ω)
    for page in cms_pages:
        try:
            response = requests.get(f'http://localhost:8000{page}', timeout=5, allow_redirects=True)
            if response.status_code not in [200, 302]:
                print(f"‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–¥ {response.status_code}")
                return False
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {page}: {e}")
            return False
    
    print("‚úÖ CMS —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True


def test_language_switching():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤ –≤ CMS"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–∑—ã–∫–æ–≤—ã–µ —Ä–æ—É—Ç—ã CMS
    language_routes = [
        '/cms/ru',
        '/cms/en', 
        '/cms/ua',
        '/cms/ru/texts',
        '/cms/en/texts',
        '/cms/ua/texts'
    ]
    
    for route in language_routes:
        try:
            response = requests.get(f'http://localhost:8000{route}', timeout=5, allow_redirects=True)
            if response.status_code not in [200, 302]:
                print(f"‚ùå –Ø–∑—ã–∫–æ–≤–æ–π —Ä–æ—É—Ç {route} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–¥ {response.status_code}")
                return False
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {route}: {e}")
            return False
    
    print("‚úÖ –Ø–∑—ã–∫–æ–≤—ã–µ —Ä–æ—É—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True


def test_header_template_syntax():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —à–∞–±–ª–æ–Ω–∞ header.html"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —à–∞–±–ª–æ–Ω–∞ header.html...")
    
    header_file = 'app/templates/partials/header.html'
    
    with open(header_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–∞
    template_variables = content.count('{{ t.')
    
    if template_variables == 0:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    required_elements = [
        'theme-toggle',
        'hover:underline',
        '{{ t.theme',
        '{{ t.home'
    ]
    
    missing_elements = []
    for element in required_elements:
        if element not in content:
            missing_elements.append(element)
    
    if missing_elements:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —ç–ª–µ–º–µ–Ω—Ç—ã: {missing_elements}")
        return False
    
    print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å —à–∞–±–ª–æ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
    return True


def test_translation_consistency():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤...")
    
    header_file = 'app/templates/partials/header.html'
    
    with open(header_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if '{{ t.theme' not in content or '{{ t.home' not in content:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–≤–æ–¥—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ fallback –∑–Ω–∞—á–µ–Ω–∏–π
    if 'or \'Theme\'' not in content or 'or \'Home\'' not in content:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç fallback –∑–Ω–∞—á–µ–Ω–∏—è")
        return False
    
    print("‚úÖ –ü–µ—Ä–µ–≤–æ–¥—ã –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã")
    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∞: –ü–µ—Ä–µ–≤–æ–¥—ã –≤ header.html")
    print("=" * 60)
    
    tests = [
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ header", test_header_contains_translations),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ —à–∞–±–ª–æ–Ω–∞", test_header_template_syntax),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤", test_translation_consistency),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ lang –≤ CMS", test_cms_pages_have_lang_context),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤", test_language_switching)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}")
        print("-" * 40)
        
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå {test_name} - –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name} - –û–®–ò–ë–ö–ê: {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ü–µ—Ä–µ–≤–æ–¥—ã –≤ header.html —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
        return False


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
