#!/usr/bin/env python3
"""
–ê–≤—Ç–æ—Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ—à–∏–±–æ–∫ bcrypt –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
"""

import sys
import os
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..'))

def test_security_module_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –±–µ–∑ –æ—à–∏–±–æ–∫"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        from app.auth.security import hash_password, verify_password
        print("   ‚úÖ –ú–æ–¥—É–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –¥–ª–∏–Ω–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
        long_password = "a" * 100
        print(f"   –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –¥–ª–∏–Ω–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º: {len(long_password)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –•—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        password_hash = hash_password(long_password)
        print(f"   ‚úÖ –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: {password_hash[:30]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
        is_valid = verify_password(long_password, password_hash)
        print(f"   ‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {is_valid}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
        return False

def test_no_bcrypt_warnings():
    """–¢–µ—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π bcrypt"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π bcrypt...")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    import warnings
    import io
    import contextlib
    
    # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º stdout –∏ stderr
    with contextlib.redirect_stdout(io.StringIO()) as stdout, \
         contextlib.redirect_stderr(io.StringIO()) as stderr:
        
        # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        with warnings.catch_warnings(record=True) as w:
            warnings.simplefilter("always")
            
            try:
                from app.auth.security import hash_password, verify_password
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏
                test_passwords = [
                    "short",
                    "a" * 100,
                    "–ø–∞—Ä–æ–ª—å123",
                    "üîê" * 30,
                ]
                
                for password in test_passwords:
                    password_hash = hash_password(password)
                    verify_password(password, password_hash)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ bcrypt
                bcrypt_warnings = [warning for warning in w if 'bcrypt' in str(warning.message).lower()]
                
                if bcrypt_warnings:
                    print(f"   ‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è bcrypt: {len(bcrypt_warnings)}")
                    for warning in bcrypt_warnings:
                        print(f"      - {warning.message}")
                    return False
                else:
                    print("   ‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è bcrypt –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                    return True
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
                return False

def test_password_processing():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–æ–ª–µ–π –±–µ–∑ –æ—à–∏–±–æ–∫"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–æ–ª–µ–π...")
    
    try:
        from app.auth.security import hash_password, verify_password
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –ø–∞—Ä–æ–ª–µ–π
        test_cases = [
            ("", "–ø—É—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å"),
            ("a" * 72, "–ø–∞—Ä–æ–ª—å 72 –±–∞–π—Ç–∞"),
            ("a" * 100, "–ø–∞—Ä–æ–ª—å 100 –±–∞–π—Ç"),
            ("–ø–∞—Ä–æ–ª—å" * 20, "–¥–ª–∏–Ω–Ω—ã–π –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π –ø–∞—Ä–æ–ª—å"),
            ("üîê" * 30, "–ø–∞—Ä–æ–ª—å —Å —ç–º–æ–¥–∑–∏"),
            ("a" * 1000, "–æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å"),
        ]
        
        success_count = 0
        
        for password, description in test_cases:
            try:
                print(f"   –¢–µ—Å—Ç–∏—Ä—É–µ–º {description}...")
                
                # –•—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
                password_hash = hash_password(password)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
                is_valid = verify_password(password, password_hash)
                
                if is_valid:
                    print(f"   ‚úÖ {description}: OK")
                    success_count += 1
                else:
                    print(f"   ‚ùå {description}: –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞")
                    
            except Exception as e:
                print(f"   ‚ùå {description}: –æ—à–∏–±–∫–∞ - {e}")
        
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(test_cases)} –ø–∞—Ä–æ–ª–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return success_count == len(test_cases)
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–æ–ª–µ–π: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ—à–∏–±–æ–∫ bcrypt")
    print("=" * 60)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(level=logging.WARNING)  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", test_security_module_import),
        ("–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π bcrypt", test_no_bcrypt_warnings),
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª–µ–π", test_password_processing),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}")
        print("-" * 40)
        
        try:
            if test_func():
                print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                passed += 1
            else:
                print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –û—à–∏–±–∫–∏ bcrypt —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã.")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
