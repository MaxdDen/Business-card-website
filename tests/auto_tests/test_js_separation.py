#!/usr/bin/env python3
"""
–ê–≤—Ç–æ—Ç–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–Ω–æ—Å–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏–∑ HTML –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ JS —Ñ–∞–π–ª—ã

–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ:
1. –í—Å–µ —Å–∫—Ä–∏–ø—Ç—ã –≤—ã–Ω–µ—Å–µ–Ω—ã –∏–∑ HTML —Ñ–∞–π–ª–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ JS —Ñ–∞–π–ª—ã
2. HTML —Ñ–∞–π–ª—ã –ø–æ–¥–∫–ª—é—á–∞—é—Ç –≤–Ω–µ—à–Ω–∏–µ JS —Ñ–∞–π–ª—ã
3. JS —Ñ–∞–π–ª—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥
4. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ –≤—ã–Ω–æ—Å–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤
"""

import os
import re
import requests
import time
from pathlib import Path


def test_js_files_exist():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ JS —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ JS —Ñ–∞–π–ª–æ–≤...")
    
    js_files = [
        'app/static/js/theme.js',
        'app/static/js/texts.js', 
        'app/static/js/users.js',
        'app/static/js/seo.js',
        'app/static/js/images.js'
    ]
    
    missing_files = []
    for js_file in js_files:
        if not os.path.exists(js_file):
            missing_files.append(js_file)
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç JS —Ñ–∞–π–ª—ã: {missing_files}")
        return False
    
    print("‚úÖ –í—Å–µ JS —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã")
    return True


def test_html_files_no_inline_scripts():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ HTML —Ñ–∞–π–ª–∞—Ö –Ω–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ –≤ HTML...")
    
    html_files = [
        'app/templates/base.html',
        'app/templates/public/base.html',
        'app/templates/texts.html',
        'app/templates/users.html',
        'app/templates/seo.html',
        'app/templates/images.html'
    ]
    
    inline_scripts_found = []
    
    for html_file in html_files:
        if not os.path.exists(html_file):
            continue
            
        with open(html_file, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # –ò—â–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã (–Ω–µ src=)
        script_pattern = r'<script(?![^>]*src=)[^>]*>.*?</script>'
        matches = re.findall(script_pattern, content, re.DOTALL | re.IGNORECASE)
        
        if matches:
            inline_scripts_found.append({
                'file': html_file,
                'count': len(matches),
                'scripts': matches[:2]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            })
    
    if inline_scripts_found:
        print("‚ùå –ù–∞–π–¥–µ–Ω—ã –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –≤ HTML —Ñ–∞–π–ª–∞—Ö:")
        for item in inline_scripts_found:
            print(f"  - {item['file']}: {item['count']} —Å–∫—Ä–∏–ø—Ç–æ–≤")
            for script in item['scripts']:
                print(f"    {script[:100]}...")
        return False
    
    print("‚úÖ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ HTML —Ñ–∞–π–ª–∞—Ö")
    return True


def test_html_files_include_js():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ HTML —Ñ–∞–π–ª—ã –ø–æ–¥–∫–ª—é—á–∞—é—Ç –≤–Ω–µ—à–Ω–∏–µ JS —Ñ–∞–π–ª—ã"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö JS —Ñ–∞–π–ª–æ–≤...")
    
    expected_js_links = {
        'app/templates/base.html': 'js/theme.js',
        'app/templates/public/base.html': 'js/theme.js',
        'app/templates/texts.html': 'js/texts.js',
        'app/templates/users.html': 'js/users.js',
        'app/templates/seo.html': 'js/seo.js',
        'app/templates/images.html': 'js/images.js'
    }
    
    missing_links = []
    
    for html_file, expected_js in expected_js_links.items():
        if not os.path.exists(html_file):
            continue
            
        with open(html_file, 'r', encoding='utf-8') as f:
            content = f.read()
            
        if expected_js not in content:
            missing_links.append(f"{html_file} -> {expected_js}")
    
    if missing_links:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ JS —Ñ–∞–π–ª—ã:")
        for link in missing_links:
            print(f"  - {link}")
        return False
    
    print("‚úÖ –í—Å–µ HTML —Ñ–∞–π–ª—ã –ø–æ–¥–∫–ª—é—á–∞—é—Ç –≤–Ω–µ—à–Ω–∏–µ JS —Ñ–∞–π–ª—ã")
    return True


def test_js_files_content():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ JS —Ñ–∞–π–ª–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ JS —Ñ–∞–π–ª–æ–≤...")
    
    js_files = {
        'app/static/js/theme.js': ['toggleTheme', 'DOMContentLoaded'],
        'app/static/js/texts.js': ['loadTexts', 'showNotification'],
        'app/static/js/users.js': ['loadUsers', 'renderUsers', 'deleteUser'],
        'app/static/js/seo.js': ['loadSeoData', 'saveSeoData', 'updatePreview'],
        'app/static/js/images.js': ['loadImages', 'renderImages', 'deleteImage']
    }
    
    content_issues = []
    
    for js_file, expected_functions in js_files.items():
        if not os.path.exists(js_file):
            content_issues.append(f"–§–∞–π–ª {js_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue
            
        with open(js_file, 'r', encoding='utf-8') as f:
            content = f.read()
            
        missing_functions = []
        for func in expected_functions:
            if func not in content:
                missing_functions.append(func)
        
        if missing_functions:
            content_issues.append(f"{js_file}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ—É–Ω–∫—Ü–∏–∏ {missing_functions}")
    
    if content_issues:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º JS —Ñ–∞–π–ª–æ–≤:")
        for issue in content_issues:
            print(f"  - {issue}")
        return False
    
    print("‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ JS —Ñ–∞–π–ª–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True


def test_server_startup():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç
        response = requests.get('http://localhost:8000/health', timeout=5)
        if response.status_code == 200:
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç")
            return True
        else:
            print(f"‚ùå –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {e}")
        return False


def test_cms_pages_load():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ CMS —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É CMS —Å—Ç—Ä–∞–Ω–∏—Ü...")
    
    cms_pages = [
        '/cms',
        '/cms/texts',
        '/cms/images', 
        '/cms/seo',
        '/cms/users'
    ]
    
    failed_pages = []
    
    for page in cms_pages:
        try:
            response = requests.get(f'http://localhost:8000{page}', timeout=5)
            if response.status_code not in [200, 302]:  # 302 –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ –Ω–∞ –ª–æ–≥–∏–Ω
                failed_pages.append(f"{page}: {response.status_code}")
        except requests.exceptions.RequestException as e:
            failed_pages.append(f"{page}: {e}")
    
    if failed_pages:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü:")
        for page in failed_pages:
            print(f"  - {page}")
        return False
    
    print("‚úÖ CMS —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True


def test_js_files_syntax():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å JS —Ñ–∞–π–ª–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å JS —Ñ–∞–π–ª–æ–≤...")
    
    js_files = [
        'app/static/js/theme.js',
        'app/static/js/texts.js',
        'app/static/js/users.js', 
        'app/static/js/seo.js',
        'app/static/js/images.js'
    ]
    
    syntax_issues = []
    
    for js_file in js_files:
        if not os.path.exists(js_file):
            continue
            
        with open(js_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–∑–æ–≤—ã–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        if content.count('{') != content.count('}'):
            syntax_issues.append(f"{js_file}: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫")
        
        if content.count('(') != content.count(')'):
            syntax_issues.append(f"{js_file}: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫—Ä—É–≥–ª—ã—Ö —Å–∫–æ–±–æ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if content.count('"') % 2 != 0:
            syntax_issues.append(f"{js_file}: –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –∫–∞–≤—ã—á–∫–∏")
    
    if syntax_issues:
        print("‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ JS —Ñ–∞–π–ª–∞—Ö:")
        for issue in syntax_issues:
            print(f"  - {issue}")
        return False
    
    print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å JS —Ñ–∞–π–ª–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∞: –í—ã–Ω–æ—Å —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏–∑ HTML –≤ JS —Ñ–∞–π–ª—ã")
    print("=" * 60)
    
    tests = [
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è JS —Ñ–∞–π–ª–æ–≤", test_js_files_exist),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤", test_html_files_no_inline_scripts),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è JS —Ñ–∞–π–ª–æ–≤", test_html_files_include_js),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ JS —Ñ–∞–π–ª–æ–≤", test_js_files_content),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ JS —Ñ–∞–π–ª–æ–≤", test_js_files_syntax),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", test_server_startup),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CMS —Å—Ç—Ä–∞–Ω–∏—Ü", test_cms_pages_load)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}")
        print("-" * 40)
        
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå {test_name} - –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name} - –û–®–ò–ë–ö–ê: {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∫—Ä–∏–ø—Ç—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–Ω–µ—Å–µ–Ω—ã –∏–∑ HTML –≤ JS —Ñ–∞–π–ª—ã.")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
        return False


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
