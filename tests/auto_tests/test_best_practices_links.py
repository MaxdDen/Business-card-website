#!/usr/bin/env python3
"""
–ê–≤—Ç–æ—Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å—Å—ã–ª–æ–∫ –ø–æ best practices

–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ:
1. –§–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥–∞–µ—Ç —è–∑—ã–∫ –≤ action URL
2. –°—Å—ã–ª–∫–∏ –≤ –¥–∞—à–±–æ—Ä–¥–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–∑–±—ã—Ç–æ—á–Ω–æ–≥–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —è–∑—ã–∫–∞
3. Middleware –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å—Å—ã–ª–∫–∏
4. –ù–∞–≤–∏–≥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ —è–∑—ã–∫–∞
"""

import requests
import sys
import os
from urllib.parse import urljoin

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))

def test_best_practices_links():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å—Å—ã–ª–æ–∫ –ø–æ best practices"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å—Å—ã–ª–æ–∫ –ø–æ best practices")
    
    # –ë–∞–∑–æ–≤—ã–π URL
    base_url = "http://127.0.0.1:8000"
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
    languages = ["en", "ua", "ru"]
    
    print(f"\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ —è–∑—ã–∫–∏: {', '.join(languages)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    try:
        response = requests.get(f"{base_url}/health", timeout=5)
        if response.status_code != 200:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
    except requests.exceptions.RequestException:
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
        return False
    
    print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    print("\nüîç –¢–µ—Å—Ç 1: –§–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å —è–∑—ã–∫–æ–º –≤ action")
    for lang in languages:
        login_url = f"{base_url}/{lang}/login"
        try:
            response = requests.get(login_url, timeout=5)
            if response.status_code == 200:
                content = response.text
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π action
                expected_action = f'action="/{lang}/login"'
                if expected_action in content:
                    print(f"  ‚úÖ {lang}/login —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π action: {expected_action}")
                else:
                    print(f"  ‚ùå {lang}/login –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π action")
                    print(f"    –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_action}")
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –Ω–∞–π–¥–µ–Ω–æ
                    import re
                    action_match = re.search(r'action="[^"]*"', content)
                    if action_match:
                        print(f"    –ù–∞–π–¥–µ–Ω–æ: {action_match.group()}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
                expected_register = f'href="/{lang}/register"'
                if expected_register in content:
                    print(f"  ‚úÖ {lang}/login —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
                else:
                    print(f"  ‚ùå {lang}/login –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
            else:
                print(f"  ‚ùå {lang}/login -> {response.status_code}")
        except requests.exceptions.RequestException as e:
            print(f"  ‚ùå {lang}/login -> –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫ –≤ –¥–∞—à–±–æ—Ä–¥–µ (–±–µ–∑ –∏–∑–±—ã—Ç–æ—á–Ω–æ–≥–æ —è–∑—ã–∫–∞)
    print("\nüîç –¢–µ—Å—Ç 2: –°—Å—ã–ª–∫–∏ –≤ –¥–∞—à–±–æ—Ä–¥–µ –±–µ–∑ –∏–∑–±—ã—Ç–æ—á–Ω–æ–≥–æ —è–∑—ã–∫–∞")
    for lang in languages:
        dashboard_url = f"{base_url}/{lang}/cms/"
        try:
            response = requests.get(dashboard_url, timeout=5, allow_redirects=False)
            if response.status_code in [302, 401]:  # –¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                print(f"  ‚úÖ {lang}/cms/ –¥–æ—Å—Ç—É–ø–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç –≤–µ–¥–µ—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
                if response.status_code == 302:
                    redirect_url = response.headers.get('Location', '')
                    if f'/{lang}/login' in redirect_url:
                        print(f"    ‚úÖ –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ {lang}/login")
                    else:
                        print(f"    ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç: {redirect_url}")
            else:
                print(f"  ‚ùå {lang}/cms/ -> {response.status_code}")
        except requests.exceptions.RequestException as e:
            print(f"  ‚ùå {lang}/cms/ -> –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    print("\nüîç –¢–µ—Å—Ç 3: –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏")
    cms_pages = ["texts", "images", "seo", "users"]
    
    for lang in languages:
        for page in cms_pages:
            page_url = f"{base_url}/{lang}/cms/{page}"
            try:
                response = requests.get(page_url, timeout=5, allow_redirects=False)
                if response.status_code in [302, 401]:  # –¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    print(f"  ‚úÖ {lang}/cms/{page} –¥–æ—Å—Ç—É–ø–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)")
                else:
                    print(f"  ‚ùå {lang}/cms/{page} -> {response.status_code}")
            except requests.exceptions.RequestException as e:
                print(f"  ‚ùå {lang}/cms/{page} -> –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–∑—ã–∫–æ–≤—ã—Ö –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π
    print("\nüîç –¢–µ—Å—Ç 4: –Ø–∑—ã–∫–æ–≤—ã–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏")
    for lang in languages:
        login_url = f"{base_url}/{lang}/login"
        try:
            response = requests.get(login_url, timeout=5)
            if response.status_code == 200:
                content = response.text
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏
                for other_lang in languages:
                    if other_lang != lang:
                        expected_link = f'/{other_lang}/login'
                        if expected_link in content:
                            print(f"  ‚úÖ {lang}/login —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ {other_lang}/login")
                        else:
                            print(f"  ‚ùå {lang}/login –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ {other_lang}/login")
            else:
                print(f"  ‚ùå {lang}/login -> {response.status_code}")
        except requests.exceptions.RequestException as e:
            print(f"  ‚ùå {lang}/login -> –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö —è–∑—ã–∫–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫
    print("\nüîç –¢–µ—Å—Ç 5: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö —è–∑—ã–∫–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫")
    for lang in languages:
        login_url = f"{base_url}/{lang}/login"
        try:
            response = requests.get(login_url, timeout=5)
            if response.status_code == 200:
                content = response.text
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ù–ï–¢ –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ —Ç–∏–ø–∞ /{{ lang }}/cms
                if "/{{ lang }}/" in content:
                    print(f"  ‚ùå {lang}/login —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ —è–∑—ã–∫–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏")
                else:
                    print(f"  ‚úÖ {lang}/login –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö —è–∑—ã–∫–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ù–ï–¢ —Å—Ç–∞—Ä—ã—Ö —Å—Å—ã–ª–æ–∫ —Ç–∏–ø–∞ /cms/ru/
                if "/cms/ru/" in content or "/cms/ua/" in content or "/cms/en/" in content:
                    print(f"  ‚ùå {lang}/login —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞—Ä—ã–µ —Å—Å—ã–ª–∫–∏ —Å —è–∑—ã–∫–æ–º –≤ –∫–æ–Ω—Ü–µ")
                else:
                    print(f"  ‚úÖ {lang}/login –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞—Ä—ã—Ö —Å—Å—ã–ª–æ–∫")
            else:
                print(f"  ‚ùå {lang}/login -> {response.status_code}")
        except requests.exceptions.RequestException as e:
            print(f"  ‚ùå {lang}/login -> –û—à–∏–±–∫–∞: {e}")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å—Å—ã–ª–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    return True

def test_middleware_consistency():
    """–¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ middleware"""
    print("\nüîç –¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ middleware")
    
    try:
        from app.site.middleware import LanguageMiddleware
        from app.site.config import get_supported_languages, get_default_language
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        supported_languages = get_supported_languages()
        default_language = get_default_language()
        
        print(f"  üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏: {supported_languages}")
        print(f"  üìã –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_language}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —è–∑—ã–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è
        expected_languages = ["en", "ua", "ru"]
        for lang in expected_languages:
            if lang in supported_languages:
                print(f"  ‚úÖ –Ø–∑—ã–∫ '{lang}' –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
            else:
                print(f"  ‚ùå –Ø–∑—ã–∫ '{lang}' –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Ö–æ–¥–∏—Ç –≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ
        if default_language in supported_languages:
            print(f"  ‚úÖ –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '{default_language}' –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        else:
            print(f"  ‚ùå –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '{default_language}' –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        
    except ImportError as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    
    return True

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å—Å—ã–ª–æ–∫ –ø–æ best practices")
    print("=" * 70)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    success = True
    
    # –¢–µ—Å—Ç 1: –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    if not test_best_practices_links():
        success = False
    
    # –¢–µ—Å—Ç 2: –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å middleware
    if not test_middleware_consistency():
        success = False
    
    print("\n" + "=" * 70)
    if success:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("üéâ –°—Å—ã–ª–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ best practices")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
    
    sys.exit(0 if success else 1)
