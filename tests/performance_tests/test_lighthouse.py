#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Lighthouse
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—É–±–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
"""

import sys
import os
import json
import time
import subprocess
import requests
import unittest
from pathlib import Path
from unittest.mock import patch

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..'))

class TestLighthousePerformance(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Lighthouse"""
    
    @classmethod
    def setUpClass(cls):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ —Ç–µ—Å—Ç–∞–º–∏"""
        cls.base_url = "http://localhost:8000"
        cls.lighthouse_available = cls._check_lighthouse_availability()
        cls.session = requests.Session()
    
    @classmethod
    def _check_lighthouse_availability(cls):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Lighthouse"""
        try:
            result = subprocess.run(
                ["lighthouse", "--version"], 
                capture_output=True, 
                text=True, 
                timeout=10
            )
            if result.returncode == 0:
                print(f"‚úÖ Lighthouse –¥–æ—Å—Ç—É–ø–µ–Ω: {result.stdout.strip()}")
                return True
            else:
                print("‚ö†Ô∏è  Lighthouse –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        except (subprocess.TimeoutExpired, FileNotFoundError):
            print("‚ö†Ô∏è  Lighthouse –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        self.session.cookies.clear()
    
    def test_server_availability(self):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            response = self.session.get(f"{self.base_url}/health", timeout=5)
            self.assertEqual(response.status_code, 200)
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        except requests.exceptions.RequestException as e:
            self.fail(f"–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    def test_homepage_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        if not self.lighthouse_available:
            self.skipTest("Lighthouse –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        print("\nüè† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
        
        try:
            # –ó–∞–ø—É—Å–∫ Lighthouse –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            result = self._run_lighthouse(f"{self.base_url}/")
            
            if result:
                self._analyze_lighthouse_results(result, "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
            else:
                print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Lighthouse")
                
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
    
    def test_about_page_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã '–û –Ω–∞—Å'"""
        if not self.lighthouse_available:
            self.skipTest("Lighthouse –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        print("\nüìÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã '–û –Ω–∞—Å'...")
        
        try:
            result = self._run_lighthouse(f"{self.base_url}/about")
            
            if result:
                self._analyze_lighthouse_results(result, "–°—Ç—Ä–∞–Ω–∏—Ü–∞ '–û –Ω–∞—Å'")
            else:
                print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Lighthouse")
                
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã '–û –Ω–∞—Å': {e}")
    
    def test_catalog_page_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–∞–ª–æ–≥–∞"""
        if not self.lighthouse_available:
            self.skipTest("Lighthouse –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        print("\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–∞–ª–æ–≥–∞...")
        
        try:
            result = self._run_lighthouse(f"{self.base_url}/catalog")
            
            if result:
                self._analyze_lighthouse_results(result, "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–∞–ª–æ–≥–∞")
            else:
                print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Lighthouse")
                
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
    
    def test_contacts_page_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        if not self.lighthouse_available:
            self.skipTest("Lighthouse –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        print("\nüìû –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...")
        
        try:
            result = self._run_lighthouse(f"{self.base_url}/contacts")
            
            if result:
                self._analyze_lighthouse_results(result, "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
            else:
                print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Lighthouse")
                
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")
    
    def test_multilang_pages_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü"""
        if not self.lighthouse_available:
            self.skipTest("Lighthouse –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        print("\nüåç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü...")
        
        languages = ["en", "ua", "ru"]
        pages = ["", "about", "catalog", "contacts"]
        
        for lang in languages:
            for page in pages:
                url = f"{self.base_url}/{lang}/{page}" if page else f"{self.base_url}/{lang}/"
                
                try:
                    print(f"   –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {url}")
                    result = self._run_lighthouse(url)
                    
                    if result:
                        self._analyze_lighthouse_results(result, f"{lang.upper()} {page or '–≥–ª–∞–≤–Ω–∞—è'}")
                    else:
                        print(f"   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {url}")
                        
                except Exception as e:
                    print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {url}: {e}")
    
    def test_cms_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ CMS (—Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)"""
        if not self.lighthouse_available:
            self.skipTest("Lighthouse –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ CMS...")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if self._authenticate_user():
            try:
                result = self._run_lighthouse(f"{self.base_url}/cms")
                
                if result:
                    self._analyze_lighthouse_results(result, "CMS –ø–∞–Ω–µ–ª—å")
                else:
                    print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Lighthouse –¥–ª—è CMS")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CMS: {e}")
        else:
            print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CMS")
    
    def _run_lighthouse(self, url):
        """–ó–∞–ø—É—Å–∫ Lighthouse –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ URL"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            temp_file = f"tests/tmp/lighthouse_{int(time.time())}.json"
            os.makedirs("tests/tmp", exist_ok=True)
            
            # –ö–æ–º–∞–Ω–¥–∞ Lighthouse
            cmd = [
                "lighthouse",
                url,
                "--output=json",
                "--output-path=" + temp_file,
                "--chrome-flags=--headless",
                "--quiet",
                "--no-enable-error-reporting"
            ]
            
            # –ó–∞–ø—É—Å–∫ Lighthouse
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60  # 60 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            )
            
            if result.returncode == 0 and os.path.exists(temp_file):
                # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                with open(temp_file, 'r', encoding='utf-8') as f:
                    lighthouse_data = json.load(f)
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.unlink(temp_file)
                
                return lighthouse_data
            else:
                print(f"‚ö†Ô∏è  Lighthouse –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {result.stderr}")
                return None
                
        except subprocess.TimeoutExpired:
            print("‚ö†Ô∏è  Lighthouse –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
            return None
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Lighthouse: {e}")
            return None
    
    def _analyze_lighthouse_results(self, results, page_name):
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Lighthouse"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            categories = results.get("categories", {})
            audits = results.get("audits", {})
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            performance_score = categories.get("performance", {}).get("score", 0)
            accessibility_score = categories.get("accessibility", {}).get("score", 0)
            best_practices_score = categories.get("best-practices", {}).get("score", 0)
            seo_score = categories.get("seo", {}).get("score", 0)
            
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {page_name}:")
            print(f"   üöÄ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {performance_score:.2f}")
            print(f"   ‚ôø –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {accessibility_score:.2f}")
            print(f"   ‚úÖ –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏: {best_practices_score:.2f}")
            print(f"   üîç SEO: {seo_score:.2f}")
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if "first-contentful-paint" in audits:
                fcp = audits["first-contentful-paint"]["numericValue"]
                print(f"   ‚è±Ô∏è  First Contentful Paint: {fcp:.0f}ms")
            
            if "largest-contentful-paint" in audits:
                lcp = audits["largest-contentful-paint"]["numericValue"]
                print(f"   ‚è±Ô∏è  Largest Contentful Paint: {lcp:.0f}ms")
            
            if "cumulative-layout-shift" in audits:
                cls = audits["cumulative-layout-shift"]["numericValue"]
                print(f"   üìê Cumulative Layout Shift: {cls:.3f}")
            
            if "total-blocking-time" in audits:
                tbt = audits["total-blocking-time"]["numericValue"]
                print(f"   üö´ Total Blocking Time: {tbt:.0f}ms")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
            self._check_performance_standards(performance_score, page_name)
            self._check_accessibility_standards(accessibility_score, page_name)
            self._check_seo_standards(seo_score, page_name)
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
    
    def _check_performance_standards(self, score, page_name):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if score >= 0.9:
            print(f"   ‚úÖ {page_name}: –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        elif score >= 0.7:
            print(f"   ‚ö†Ô∏è  {page_name}: –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)")
        elif score >= 0.5:
            print(f"   ‚ö†Ô∏è  {page_name}: –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Ç—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)")
        else:
            print(f"   ‚ùå {page_name}: –ü–ª–æ—Ö–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–∫—Ä–∏—Ç–∏—á–Ω–æ)")
    
    def _check_accessibility_standards(self, score, page_name):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
        if score >= 0.9:
            print(f"   ‚úÖ {page_name}: –û—Ç–ª–∏—á–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å")
        elif score >= 0.7:
            print(f"   ‚ö†Ô∏è  {page_name}: –•–æ—Ä–æ—à–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å")
        else:
            print(f"   ‚ùå {page_name}: –ü–ª–æ—Ö–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å")
    
    def _check_seo_standards(self, score, page_name):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º SEO"""
        if score >= 0.9:
            print(f"   ‚úÖ {page_name}: –û—Ç–ª–∏—á–Ω–æ–µ SEO")
        elif score >= 0.7:
            print(f"   ‚ö†Ô∏è  {page_name}: –•–æ—Ä–æ—à–µ–µ SEO")
        else:
            print(f"   ‚ùå {page_name}: –ü–ª–æ—Ö–æ–µ SEO")
    
    def _authenticate_user(self):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CMS"""
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            login_data = {
                "email": "admin@example.com",
                "password": "adminpassword123"
            }
            
            response = self.session.post(
                f"{self.base_url}/login",
                data=login_data,
                timeout=10
            )
            
            return response.status_code == 200 and "cms" in response.url.lower()
            
        except Exception:
            return False
    
    def test_page_load_times(self):
        """–¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü"""
        print("\n‚è±Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü...")
        
        pages = [
            ("/", "–ì–ª–∞–≤–Ω–∞—è"),
            ("/about", "–û –Ω–∞—Å"),
            ("/catalog", "–ö–∞—Ç–∞–ª–æ–≥"),
            ("/contacts", "–ö–æ–Ω—Ç–∞–∫—Ç—ã")
        ]
        
        for path, name in pages:
            try:
                start_time = time.time()
                response = self.session.get(f"{self.base_url}{path}", timeout=10)
                end_time = time.time()
                
                load_time = end_time - start_time
                
                if response.status_code == 200:
                    if load_time < 1.0:
                        print(f"   ‚úÖ {name}: {load_time:.3f}—Å (–±—ã—Å—Ç—Ä–æ)")
                    elif load_time < 3.0:
                        print(f"   ‚ö†Ô∏è  {name}: {load_time:.3f}—Å (—Å—Ä–µ–¥–Ω–µ)")
                    else:
                        print(f"   ‚ùå {name}: {load_time:.3f}—Å (–º–µ–¥–ª–µ–Ω–Ω–æ)")
                else:
                    print(f"   ‚ùå {name}: HTTP {response.status_code}")
                    
            except Exception as e:
                print(f"   ‚ùå {name}: –û—à–∏–±–∫–∞ - {e}")
    
    def test_resource_optimization(self):
        """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            response = self.session.get(f"{self.base_url}/", timeout=10)
            
            if response.status_code == 200:
                content = response.text
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
                checks = [
                    ("CSS –º–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω", "minified" in content or "compressed" in content),
                    ("WebP –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", ".webp" in content),
                    ("–°–∂–∞—Ç–∏–µ –≤–∫–ª—é—á–µ–Ω–æ", "gzip" in response.headers.get("content-encoding", "")),
                    ("–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ", "cache-control" in response.headers),
                ]
                
                for check_name, check_result in checks:
                    if check_result:
                        print(f"   ‚úÖ {check_name}")
                    else:
                        print(f"   ‚ö†Ô∏è  {check_name}: –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            else:
                print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É: HTTP {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")


class TestLighthouseIntegration(unittest.TestCase):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã Lighthouse"""
    
    def test_lighthouse_installation(self):
        """–¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Lighthouse"""
        try:
            result = subprocess.run(
                ["lighthouse", "--version"], 
                capture_output=True, 
                text=True, 
                timeout=10
            )
            
            if result.returncode == 0:
                print(f"‚úÖ Lighthouse —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result.stdout.strip()}")
            else:
                print("‚ùå Lighthouse –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: npm install -g lighthouse")
                
        except (subprocess.TimeoutExpired, FileNotFoundError):
            print("‚ùå Lighthouse –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: npm install -g lighthouse")
    
    def test_chrome_availability(self):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Chrome –¥–ª—è Lighthouse"""
        try:
            result = subprocess.run(
                ["google-chrome", "--version"], 
                capture_output=True, 
                text=True, 
                timeout=10
            )
            
            if result.returncode == 0:
                print(f"‚úÖ Chrome –¥–æ—Å—Ç—É–ø–µ–Ω: {result.stdout.strip()}")
            else:
                print("‚ö†Ô∏è  Chrome –Ω–µ –Ω–∞–π–¥–µ–Ω, Lighthouse –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å")
                
        except (subprocess.TimeoutExpired, FileNotFoundError):
            print("‚ö†Ô∏è  Chrome –Ω–µ –Ω–∞–π–¥–µ–Ω, Lighthouse –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å")
            print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Google Chrome –¥–ª—è —Ä–∞–±–æ—Ç—ã Lighthouse")


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Lighthouse...")
    print("=" * 60)
    print("‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: uvicorn app.main:app --reload")
    print("‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Lighthouse —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: npm install -g lighthouse")
    print("=" * 60)
    
    unittest.main(verbosity=2)
