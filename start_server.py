#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–≤–∏—Å—à–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
"""
import os
import sys
import signal
import subprocess
import time
import psutil
from pathlib import Path

def kill_existing_processes():
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python/uvicorn"""
    print("üîç –ü–æ–∏—Å–∫ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
    
    killed_count = 0
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            if proc.info['name'] and 'python' in proc.info['name'].lower():
                cmdline = ' '.join(proc.info['cmdline']) if proc.info['cmdline'] else ''
                if 'uvicorn' in cmdline or 'app.main:app' in cmdline:
                    print(f"üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ PID {proc.info['pid']}: {cmdline}")
                    proc.kill()
                    killed_count += 1
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass
    
    if killed_count > 0:
        print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ {killed_count} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        time.sleep(2)  # –î–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    else:
        print("‚ÑπÔ∏è  –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

def create_env_file():
    """–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª .env –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
    env_file = Path('.env')
    env_example = Path('env.example')
    
    if not env_file.exists() and env_example.exists():
        print("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ .env –∏–∑ env.example...")
        with open(env_example, 'r', encoding='utf-8') as f:
            content = f.read()
        with open(env_file, 'w', encoding='utf-8') as f:
            f.write(content)
        print("‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω")
    elif env_file.exists():
        print("‚úÖ –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    else:
        print("‚ö†Ô∏è  –§–∞–π–ª env.example –Ω–µ –Ω–∞–π–¥–µ–Ω")

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    try:
        import fastapi
        import uvicorn
        import jinja2
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    except ImportError as e:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {e}")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: pip install -r requirements.txt")
        return False

def start_server():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è uvicorn
    host = os.getenv('HOST', '127.0.0.1')
    port = int(os.getenv('PORT', 8000))
    
    cmd = [
        sys.executable, '-m', 'uvicorn',
        'app.main:app',
        '--host', host,
        '--port', str(port),
        '--reload',
        '--log-level', 'info',
        '--access-log',
        '--timeout-keep-alive', '30',  # –¢–∞–π–º–∞—É—Ç –¥–ª—è keep-alive —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        '--limit-concurrency', '100',  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        '--limit-max-requests', '1000'  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ worker
    ]
    
    print(f"üåê –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://{host}:{port}")
    print("üîÑ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    try:
        subprocess.run(cmd, check=True)
    except KeyboardInterrupt:
        print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return False
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ CMS —Å–µ—Ä–≤–µ—Ä–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∑–∞–≤–∏—Å—à–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not Path('app/main.py').exists():
        print("‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
    create_env_file()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not check_dependencies():
        sys.exit(1)
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    kill_existing_processes()
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    start_server()

if __name__ == '__main__':
    main()
